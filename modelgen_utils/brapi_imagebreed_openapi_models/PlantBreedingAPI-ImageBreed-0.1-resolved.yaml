---
openapi: 3.0.0
info:
  title: Imagebreed API
  description: Imagebreed API
  version: "0.1"
servers:
- url: https://virtserver.swaggerhub.com/PlantBreedingAPI/ImageBreed/0.1
  description: SwaggerHub API Auto Mocking
security:
- AuthorizationToken: []
tags:
- name: Images
  description: Images
  externalDocs:
    description: Docs
    url: https://brapi.org/
- name: Image Collections
  description: Images Collections
  externalDocs:
    description: Docs
    url: https://brapi.org/
- name: Imaging Events
  description: Imaging Events
  externalDocs:
    description: Docs
    url: https://brapi.org/
- name: Image Mutations
  description: Images Mutations
  externalDocs:
    description: Docs
    url: https://brapi.org/
- name: Drone Imagery
  description: Original ImageBase API
  externalDocs:
    description: Docs
    url: https://brapi.org/
paths:
  /delete/imageCollections:
    post:
      tags:
      - Image Collections
      summary: Submit a delete request for `ImageCollections`
      description: Submit a delete request for `ImageCollections`
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageCollectionSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCollectionDeleteResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /delete/images:
    post:
      tags:
      - Images
      summary: Submit a delete request for `Images`
      description: Submit a delete request for `Images`
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDeleteResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /delete/imagingevents:
    post:
      tags:
      - Imaging Events
      summary: Submit a delete request for `ImagingEvents`
      description: Submit a delete request for `ImagingEvents`
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagingEventSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagingEventDeleteResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/analysis_query:
    get:
      tags:
      - Drone Imagery
      summary: For retrieving all plot metadata, phenotype values, and image URLs in a tabular format.
      description: For retrieving all plot metadata, phenotype values, and image URLs in a tabular format. Rows in the table are for each field plot, whereas, columns contain all field trial metadata, previous phenotypic values, and all plot images from all drone runs.
      parameters:
      - name: field_trial_id_list
        in: query
        description: An array of field trial database ids to query.
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: '[202, 301]'
      - name: drone_run_project_id_list
        in: query
        description: An array of drone run database ids to query.
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: '[2005, 2006]'
      - name: format
        in: query
        description: The format for the response.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: csv
          enum:
          - csv
          - xls
          - json
        example: csv
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisQueryResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/assign_plot_polygons:
    post:
      tags:
      - Drone Imagery
      summary: For assigning four-sided plot polygons onto a drone run image
      description: "For assigning four-sided plot polygons onto a drone run image and saving the plot images to their plot in the database. Uses OpenCV pointPolygonTest to cut out and save the plot polygon images. Must be logged in the assign plot polygons.\n\nReplace `POST /drone_imagery/assign_plot_polygons` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [\n    {\n      \"parameterName\": \"assign_plot_polygons_type\",\n      \"parameterValue\": \"observation_unit_polygon_nir_imagery\"\n    },{\n      \"parameterName\": \"stock_polygons\",\n      \"parameterValue\": {\n        \"2018_NYH2_plot_1\": [ {\"x\": 100, \"y\": 100}, {\"x\": 120, \"y\": 100}, {\"x\": 120, \"y\": 80}, {\"x\": 100, \"y\": 80} ],\n        \"2018_NYH2_plot_2\": [ {\"x\": 200, \"y\": 100}, {\"x\": 220, \"y\": 100}, {\"x\": 220, \"y\": 80}, {\"x\": 200, \"y\": 80} ]\n      }\n    }\n  ],\n  \"inputImageCollectionDbIds\": [],\n  \"inputImageDbIds\": [\n    \"34a22db7\"\n  ]\n}\n``` "
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignPlotPolygonsRequest'
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignPlotPolygonsResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/calculate_fourier_transform:
    post:
      tags:
      - Drone Imagery
      summary: For calculating a vegetation index for an image.
      description: "For calculating a vegetation index for an image. The input image is a 3 channel image, such as BGR (Blue, Green, Red) or NRN (NIR, Red, NIR). \nThe vegetation index is saved as an image in the database and returned. Must be logged in to merge drone run band images.\n\nReplace `POST /drone_imagery/calculate_fourier_transform` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [\n    {\n      \"parameterName\": \"high_pass_filter\",\n      \"parameterValue\": \"20\"\n    },{\n      \"parameterName\": \"high_pass_filter_type\",\n      \"parameterValue\": \"frequency\"\n    },{\n      \"parameterName\": \"image_type\",\n      \"parameterValue\": \"denoised_stitched_drone_imagery\"\n    }\n  ],\n  \"inputImageCollectionDbIds\": [],\n  \"inputImageDbIds\": [\n    \"34a22db7\"\n  ]\n}\n``` "
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateFourierTransformRequest'
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculateFourierTransformResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/calculate_vegetative_index:
    post:
      tags:
      - Drone Imagery
      summary: For calculating a vegetation index for an image.
      description: "For calculating a vegetation index for an image. The input image is a 3 channel image, such as BGR (Blue, Green, Red) or \nNRN (NIR, Red, NIR). The vegetation index is saved as an image in the database and returned. Must be logged in to merge drone run band images.\n\nReplace `POST /drone_imagery/calculate_vegetative_index` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [\n    {\n      \"parameterName\": \"vegetative_index\",\n      \"parameterValue\": \"NDVI\"\n    },{\n      \"parameterName\": \"image_type\",\n      \"parameterValue\": \"NRN\"\n    }\n  ],\n  \"inputImageCollectionDbIds\": [],\n  \"inputImageDbIds\": [\n    \"34a22db7\"\n  ]\n}\n``` "
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateVegetativeIndexRequest'
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculateVegetativeIndexResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/crop_image:
    get:
      tags:
      - Drone Imagery
      summary: For cropping an image to a four-sided polygon
      description: "For cropping an image to a four-sided polygon. Uses OpenCV pointPolygonTest to crop and save the image. Must be logged in to crop an image.\n\n\nReplace `GET /drone_imagery/crop_image` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [\n    {\n      \"parameterName\": \"polygon\",\n      \"parameterValue\": '[{\"x\":100, \"y\":2000}, {\"x\":1200, \"y\":2000}, {\"x\":1200, \"y\":80}, {\"x\":100, \"y\":80}]'\n    }\n  ],\n  \"inputImageCollectionDbIds\": [],\n  \"inputImageDbIds\": [\n    \"34a22db7\"\n  ]\n}\n``` "
      parameters:
      - name: image_id
        in: query
        description: The database image identifier for the image to remove the background from.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1900
      - name: drone_run_band_project_id
        in: query
        description: The database drone run band identifier for which the background removed image belongs to.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 203
      - name: polygon
        in: query
        description: An array of four objects representing the x and y coordinates of the bounding four-sided polygon.
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: '[{"x":100, "y":2000}, {"x":1200, "y":2000}, {"x":1200, "y":80}, {"x":100, "y":80}]'
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropImageResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/delete_drone_run:
    get:
      tags:
      - Drone Imagery
      summary: To permanently delete a drone run
      description: |-
        To permanently delete a drone run along with all related drone run bands and generated phenotypes from the database. All images related to the drone run are obsoleted in the database. Must be logged in to delete a drone run.

        Replace `GET /drone_imagery/delete_drone_run` with `POST /delete/imagingevents` with the following example JSON
        ```
        {
          "imagingEventDbIds": ["101"]
        }
        ```
      parameters:
      - name: drone_run_project_id
        in: query
        description: The database identifier for the drone run.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 101
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDroneRunResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/denoise:
    get:
      tags:
      - Drone Imagery
      summary: For denoising an image.
      description: "For denoising an image. Uses a very lenient setting of OpenCV fastNlMeansDenoising to remove background noise. Must be logged in the denoise an image.\n\nReplace `GET /drone_imagery/denoise` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [],\n  \"inputImageCollectionDbIds\": [],\n  \"inputImageDbIds\": [\n    \"34a22db7\"\n  ]\n}\n``` "
      parameters:
      - name: image_id
        in: query
        description: The database image identifier for the image to denoise.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1900
      - name: drone_run_band_project_id
        in: query
        description: The database drone run band identifier for which the denoised image belongs to.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 203
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DenoiseResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/generate_phenotypes:
    post:
      tags:
      - Drone Imagery
      summary: For generating phenotypes for all plot images created from the standard process.
      description: "For generating phenotypes for all plot images created from the standard process. If the standard process is \nstill executing on a drone run, then this process will be delayed until it has finished. Phenotypes extracted \nfrom plot images are annotated with the relative time point of the drone run, the type of image observed, and \nthe processing method run on the image. Must be logged in to generate phenotypes.\n\n\nCurrently, zonal statistic phenotypes can be calculated; zonal statistics are: non-zero pixel count, total \npixel sum, mean pixel value, harmonic mean value, median pixel value, variance pixel value, standard \ndeviation pixel value, minimum pixel value, maximum pixel value, minority pixel value, minority pixel count, \nmajority pixel value, majority pixel count, and pixel variety count."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneratePhenotypesRequest'
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratePhenotypesResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/get_contours:
    get:
      tags:
      - Drone Imagery
      summary: For getting the contours of an image.
      description: "For getting the contours of an image. Contours detected using OpenCV adaptiveThreshold and morphologyEx. Must be logged in the get contours of image.\n\nReplace `GET /drone_imagery/get_contours` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [],\n  \"inputImageCollectionDbIds\": [],\n  \"inputImageDbIds\": [\n    \"34a22db7\"\n  ]\n}\n``` "
      parameters:
      - name: image_id
        in: query
        description: The database image identifier for the image for which to calculate contours.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1900
      - name: drone_run_band_project_id
        in: query
        description: The database drone run band identifier for which the contours image belongs to.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 203
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContoursResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/get_image:
    get:
      tags:
      - Drone Imagery
      summary: For retrieving and downloading an image from the database
      description: "For retrieving and downloading an image from the database. Must be logged in to retrieve an image.\n\nReplace `GET /drone_imagery/get_image` with `GET /images` "
      parameters:
      - name: image_id
        in: query
        description: The database image identifier.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1900
      - name: size
        in: query
        description: The size of the image to return.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: original
          enum:
          - original
          - large
          - small
          - medium
          - thumbnail
          - tiny
        example: original
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetImageResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/mask_remove_background:
    get:
      tags:
      - Drone Imagery
      summary: For removing the background from an image using a mask.
      description: "For removing the background from an image using a mask. Generally, the mask is of a vegetation index. Must be logged in to remove the background via a mask.\n\nReplace `GET /drone_imagery/mask_remove_background` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [\n    {\n      \"parameterName\": \"mask_image_id\",\n      \"parameterValue\": \"4d32a2b7\"\n    },{\n      \"parameterName\": \"mask_type\",\n      \"parameterValue\": \"denoised_background_removed_tgi_mask_original\"\n    }\n  ],\n  \"inputImageCollectionDbIds\": [],\n  \"inputImageDbIds\": [\n    \"34a22db7\"\n  ]\n}\n``` "
      parameters:
      - name: image_id
        in: query
        description: The database image identifier for the image to remove the background from.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1900
      - name: drone_run_band_project_id
        in: query
        description: The database drone run band identifier for which the background removed image belongs to.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 203
      - name: mask_image_id
        in: query
        description: The database image identifier for the mask, which will be used to remove the background. This is generally an image identifier for a vegetation index.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 901
      - name: mask_type
        in: query
        description: The produced background removed image requires a type.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - denoised_background_removed_tgi_mask_original
          - denoised_background_removed_vari_mask_original
          - denoised_background_removed_ndvi_mask_original
          - denoised_background_removed_thresholded_tgi_mask_original
          - denoised_background_removed_thresholded_vari_mask_original
          - denoised_background_removed_thresholded_ndvi_mask_original
        example: denoised_background_removed_tgi_mask_original
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaskRemoveBackgroundResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/merge_bands:
    get:
      tags:
      - Drone Imagery
      summary: For merging three separate drone run bands into a single image
      description: "For merging three separate drone run bands into a single image. Useful for merging drone run bands into 3 channel BGR (Blue, Green, Red) or NRN (NIR, Red, NIR) images. Must be logged in to merge drone run band images.\n\nReplace `GET /drone_imagery/merge_bands` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [],\n  \"inputImageCollectionDbIds\": [\"901\", \"902\", \"903\"],\n  \"inputImageDbIds\": []\n}\n``` "
      parameters:
      - name: drone_run_project_id
        in: query
        description: The database identifier for the drone run in which the drone run bands belong.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 10
      - name: drone_run_project_name
        in: query
        description: The name for the drone run in which the drone run bands belong.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 07012018_NYH2
      - name: band_1_drone_run_band_project_id
        in: query
        description: The database identifier for the drone run band to merge. This image will be the first channel.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 901
      - name: band_2_drone_run_band_project_id
        in: query
        description: The database identifier for the drone run band to merge. This image will be the second channel.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 902
      - name: band_3_drone_run_band_project_id
        in: query
        description: The database identifier for the drone run band to merge. This image will be the third channel.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 903
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeBandsResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/raw_drone_imagery_plot_image_count:
    get:
      tags:
      - Drone Imagery
      summary: For summarizing the number of plot images saved in the database for a drone run.
      description: "For summarizing the number of plot images saved in the database for a drone run.\n\nNo direct replacement yet ... Could get all the same information with `GET /imagecollections` but not as explicit or condensed. Perhaps fitler by `?imagingEventDbId` and `?descriptiveOntologyTerms`. "
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/remove_background_save:
    post:
      tags:
      - Drone Imagery
      summary: For removing the background using an upper and lower threshold
      description: "For removing the background using an upper and lower threshold. Uses OpenCV threshold. Must be logged in to remove the background of an image via thresholding.\n\nReplace `GET /drone_imagery/remove_background_save` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [\n    {\n      \"parameterName\": \"image_type\",\n      \"parameterValue\": \"threshold_background_removed_stitched_drone_imagery\"\n    },{\n      \"parameterName\": \"lower_threshold\",\n      \"parameterValue\": \"20\"\n    },{\n      \"parameterName\": \"upper_threshold\",\n      \"parameterValue\": \"220\"\n    }\n  ],\n  \"inputImageCollectionDbIds\": [],\n  \"inputImageDbIds\": [\n    \"34a22db7\"\n  ]\n}\n``` "
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveBackgroundSaveRequest'
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveBackgroundSaveResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/remove_image:
    get:
      tags:
      - Drone Imagery
      summary: For deleting an image from the database
      description: |-
        For deleting an image from the database. Deletion in this case means obsoletion. Must be logged in to delete an image.

        Replace `GET /drone_imagery/remove_image` with `POST /delete/images` with the following example JSON
        ```
        {
          "imageDbIds": ["101"]
        }
        ```
      parameters:
      - name: image_id
        in: query
        description: The database image identifier.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1900
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveImageResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/rotate_image:
    get:
      tags:
      - Drone Imagery
      summary: For rotating an image clockwise or counter-clockwise.
      description: "For rotating an image clockwise or counter-clockwise. Saves the rotated image in the database and returns it. Must be logged in to rotate an image.\n\nReplace `GET /drone_imagery/rotate_image` with `POST /imagemutationruns` with the following example JSON\n\n```\n{\n  \"imageMutationDbId\": \"224ab7d3\",\n  \"imagingEventDbId\": \"32aa577d\",\n  \"imageMutationParameters\": [\n    {\n      \"parameterName\": \"angle\",\n      \"parameterValue\": \"-0.102\"\n    },{\n      \"parameterName\": \"view_only\",\n      \"parameterValue\": \"false\"\n    }\n  ],\n  \"inputImageCollectionDbIds\": [],\n  \"inputImageDbIds\": [\n    \"34a22db7\"\n  ]\n}\n``` "
      parameters:
      - name: image_id
        in: query
        description: The database image identifier for the image you want to rotate.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1900
      - name: drone_run_band_project_id
        in: query
        description: The database drone run band identifier for which the rotated image belongs to.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 203
      - name: angle
        in: query
        description: The angle to rotate the image in degrees. Positive values are counter-clockwise and negative values are clockwise. Can be fractions of a degree.
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: "-0.102"
      - name: view_only
        in: query
        description: If this is set to true, then the rotated image is only temporary, whereas, if set to false, then the rotated image is saved to the drone run band.
        required: true
        style: form
        explode: true
        schema:
          type: boolean
        example: false
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RotateImageResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/standard_process_apply:
    get:
      tags:
      - Drone Imagery
      summary: For applying a standard process to all uploaded drone run bands
      description: "For applying a standard process to all uploaded drone run bands in a drone run. This requires for the standard process of rotating, \ncropping, thresholding, and plot polygon templating to be done manually for one drone run band; however, once the standard process \nis defined for one drone run band, it can be applied to all other drone run bands in the drone run and to vegetation indices. Must \nbe logged in the apply a standard process.\n\n\nConsider a field experiment with 500 plots and uploaded drone run bands for blue, green, red, NIR, and red edge. The NIR drone run \nband could be rotated, cropped, denoised, and plot polygon templated manually. Afterward, the standard process could be applied to \nthe remaining blue, green, red, and red edge drone run bands as well as to the TGI, VARI, and NDVI vegetation indices. In this case, \nthe standard process will produce 17 different processed images for each plot, totaling 8500 plot images for the field trial. The 17 \ndifferent processed image types are: background removed via threshold (top and bottom 25% of pixel values removed) for blue, green, \nred, NIR, and red edge; merged red, blue, green image with background removed via TGI and VARI masks; merged red, blue, green image \nwith background removed via thresholded TGI and VARI masks; merged NIR and red image with background removed via NDVI mask; merged \nNIR and red image with background removed via thresholded NDVI mask; the TGI, VARI, and NDVI indices; the TGI, VARI, and NDVI indices \nwith background removed via threshold (top and bottom 25% of pixel values removed)."
      parameters:
      - name: drone_run_band_project_id
        in: query
        description: The database identifier for a drone run band that has already had a standard process defined. This process will be applied to the given drone run bands.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 1900
      - name: apply_drone_run_band_project_ids
        in: query
        description: An array of database identifiers for the drone run bands to run the standard process on.
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: '[1902, 1903]'
      - name: drone_run_project_id
        in: query
        description: The database identifier of the drone run being processed.
        required: true
        style: form
        explode: true
        schema:
          type: integer
        example: 203
      - name: vegetative_indices
        in: query
        description: A list of vegetation indices to apply the standard process to.
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: '["TGI", "VARI", "NDVI"]'
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardProcessApplyResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /drone_imagery/upload_drone_imagery:
    post:
      tags:
      - Drone Imagery
      summary: For uploading drone images into the database
      description: "For uploading drone images into the database. Drone images are uploaded into a drone run under a field trial that exists in the database. \nIf the drone run already exists in the database, then a new one does not need to be created; however, a new drone run can be saved in the \ndatabase in this step if needed. Drone run images are uploaded as separate orthomosaic images for each captured band, e.g. if a camera \ncaptured five separate bands (Blue, Green, Red, NIR, and Red Edge), each band would be uploaded as an individual drone run band in the database. \nEach drone run band should cover the entire field experiment and should be aligned identically with all other drone run bands in the drone run. \nRaw-image captures from Micasense Rededge 5 band cameras or raw image captures from color image cameras can be uploaded into ImageBreed using a \ncompressed (.zip) file. ImageBreed will then stitch the raw captures into an orthophotomosaic. Organizationally in ImageBreed: Field Trial -> \nDrone Run(s) -> Drone Run Band(s). Must be logged in to upload drone images.\n\nNo direct replacement, combonation of calls to acheive the same result\n- `POST /imagingevents` Create a new \"drone run\" if required\n- `POST /imagecollections` Create new image collection objects for each \"drone run band\" metadata\n- `PUT /imageCollections/{imageCollectionDbId}/imagecontent` to upload a zip file for each \"drone run band\" with all the image files "
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadDroneImageryRequest'
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDroneImageryResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /imageCollections:
    get:
      tags:
      - Image Collections
      summary: Get the imageCollection metadata summaries
      description: "Get filtered set of imageCollection metadata\n\nImplementation Notes\n\n- ''imageCollectionURL'' should be a complete URL describing the location of the imageCollection. There is no BrAPI call for \nretrieving the imageCollection content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the imageCollection. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s."
      parameters:
      - name: imageCollectionDbId
        in: query
        description: The unique identifier for a imageCollection
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: imageCollectionName
        in: query
        description: The human readable name of an imageCollection
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitDbId
        in: query
        description: The unique identifier of the observation unit an imageCollection is portraying
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationDbId
        in: query
        description: The unique identifier of the observation an imageCollection is associated with
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: descriptiveOntologyTerm
        in: query
        description: A descriptive term associated with an imageCollection
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: commonCropName
        in: query
        description: "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)"
        required: false
        deprecated: true
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceId
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCollectionListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Image Collections
      summary: Create new imageCollection metadata records
      description: "Create new imageCollection metadata records\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /imageCollections/{imageCollectionDbId}/imagecontent' for full imageCollection upload capability\n\n- ''imageCollectionURL'' should be a complete URL describing the location of the imageCollection. There is no BrAPI call for retrieving \nthe imageCollection content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the imageCollection. These could be simple descriptive words, or \nontology references, or full ontology URI's.\n\n- The '/imageCollections' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons.\n\n- With most imageCollections, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.\n\n- For top down imageCollections (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the imageCollection content, and the Polygon geometry may be used to indicate the border of the \nimageCollection content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/ImageCollection_Upload"
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImageCollectionNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCollectionListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /imageCollections/{imageCollectionDbId}/imagecontent:
    put:
      tags:
      - Image Collections
      summary: Attach an imageCollection binary file to an existing imageCollection metadata record
      description: "This endpoint is used to attach an imageCollection binary file to an existing imageCollection metadata record. All of the other ImageCollections endpoints \ndeal with the JSON for imageCollection metadata, but 'PUT /imageCollections/{imageCollectionDbId}/imagecontent' allows you to send any binary file with a Content \nType (MIME) of imageCollection/*. When the real imageCollection is uploaded, the server may choose to update some of the metadata to reflect the \nreality of the imageCollection that was uploaded, and should respond with the updated JSON.\n\nImplementation Notes\n\n- This endpoint should be implemented with 'POST /imageCollections' for full imageCollection upload capability\n\n- This endpoint should be implemented with 'PUT /imageCollections/{imageCollectionDbId}' for full imageCollection update capability\n\n- A server may choose to modify the imageCollection metadata object based on the actually imageCollection which has been uploaded by this endpoint. \n\n- ImageCollection data may be stored in a database or file system. Servers should generate and provide the \"imageCollectionURL\" for retrieving the \n  imageCollection binary file. \n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/ImageCollection_Upload"
      parameters:
      - name: imageCollectionDbId
        in: path
        description: The unique identifier for an imageCollection
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          imageCollection/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCollectionSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /imagecollections/{imageCollectionDbId}:
    get:
      tags:
      - Image Collections
      summary: Get the an imageCollection metadata summary
      description: "Get one imageCollection metadata object\n\nImplementation Notes\n\n- ''imageCollectionURL'' should be a complete URL describing the location of the imageCollection. There is no BrAPI call for \nretrieving the imageCollection content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the imageCollection. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s."
      parameters:
      - name: imageCollectionDbId
        in: path
        description: The unique identifier for a imageCollection
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCollectionSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Image Collections
      summary: Update an existing imageCollection metadata record
      description: "Update an existing imageCollection metadata record\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /imageCollections/{imageCollectionDbId}/imagecontent' for full imageCollection update capability\n\n- A server may choose to modify the imageCollection metadata object based on the actually imageCollection which has been uploaded. \n\n- ImageCollection data may be stored in a database or file system. Servers should generate and provide the \"imageCollectionURL\" as an \nabsolute path for retrieving the imageCollection, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the imageCollection. These could be simple descriptive words, or \nontology references, or full ontology URI's. \n\n- The '/imageCollections' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons. \n\n- With most imageCollections, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n\n- For top down imageCollections (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the imageCollection content, and the Polygon geometry may be used to indicate the border of the \nimageCollection content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/ImageCollection_Upload"
      parameters:
      - name: imageCollectionDbId
        in: path
        description: The unique identifier for a imageCollection
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageCollectionNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCollectionSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /imagemutationruns:
    post:
      tags:
      - Image Mutations
      summary: Get filtered set of image mutations
      description: Get filtered set of image mutations
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageMutationRunRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageMutationRunListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /imagemutations:
    get:
      tags:
      - Image Mutations
      summary: Get filtered set of image mutations
      description: Get filtered set of image mutations
      parameters:
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageMutationListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /images:
    get:
      tags:
      - Images
      summary: Get the image metadata summaries
      description: "Get filtered set of image metadata\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for \nretrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s."
      parameters:
      - name: imageDbId
        in: query
        description: The unique identifier for a image
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: imageName
        in: query
        description: The human readable name of an image
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitDbId
        in: query
        description: The unique identifier of the observation unit an image is portraying
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationDbId
        in: query
        description: The unique identifier of the observation an image is associated with
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: descriptiveOntologyTerm
        in: query
        description: A descriptive term associated with an image
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: commonCropName
        in: query
        description: "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)"
        required: false
        deprecated: true
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceId
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Images
      summary: Create new image metadata records
      description: "Create new image metadata records\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /images/{imageDbId}/imagecontent' for full image upload capability\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving \nthe image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or \nontology references, or full ontology URI's.\n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons.\n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.\n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the \nimage content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/Image_Upload"
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImageNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /images/{imageDbId}:
    get:
      tags:
      - Images
      summary: Get the an image metadata summary
      description: "Get one image metadata object\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for \nretrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s."
      parameters:
      - name: imageDbId
        in: path
        description: The unique identifier for a image
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Images
      summary: Update an existing image metadata record
      description: "Update an existing image metadata record\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /images/{imageDbId}/imagecontent' for full image update capability\n\n- A server may choose to modify the image metadata object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" as an \nabsolute path for retrieving the image, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or \nontology references, or full ontology URI's. \n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons. \n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the \nimage content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/Image_Upload"
      parameters:
      - name: imageDbId
        in: path
        description: The unique identifier for a image
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /images/{imageDbId}/imagecontent:
    put:
      tags:
      - Images
      summary: Attach an image binary file to an existing image metadata record
      description: "This endpoint is used to attach an image binary file to an existing image metadata record. All of the other Images endpoints \ndeal with the JSON for image metadata, but 'PUT /images/{imageDbId}/imagecontent' allows you to send any binary file with a Content \nType (MIME) of image/*. When the real image is uploaded, the server may choose to update some of the metadata to reflect the \nreality of the image that was uploaded, and should respond with the updated JSON.\n\nImplementation Notes\n\n- This endpoint should be implemented with 'POST /images' for full image upload capability\n\n- This endpoint should be implemented with 'PUT /images/{imageDbId}' for full image update capability\n\n- A server may choose to modify the image metadata object based on the actually image which has been uploaded by this endpoint. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" for retrieving the \n  image binary file. \n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/Image_Upload"
      parameters:
      - name: imageDbId
        in: path
        description: The unique identifier for an image
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
  /imagingevents:
    get:
      tags:
      - Imaging Events
      summary: Get the imagingEvent metadata summaries
      description: "Get filtered set of imagingEvent metadata\n\nImplementation Notes\n\n- ''imagingEventURL'' should be a complete URL describing the location of the imagingEvent. There is no BrAPI call for \nretrieving the imagingEvent content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the imagingEvent. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s."
      parameters:
      - name: imagingEventDbId
        in: query
        description: The unique identifier for a imagingEvent
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: imagingEventName
        in: query
        description: The human readable name of an imagingEvent
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationUnitDbId
        in: query
        description: The unique identifier of the observation unit an imagingEvent is portraying
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: observationDbId
        in: query
        description: The unique identifier of the observation an imagingEvent is associated with
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: descriptiveOntologyTerm
        in: query
        description: A descriptive term associated with an imagingEvent
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: commonCropName
        in: query
        description: "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: programDbId
        in: query
        description: "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceID
        in: query
        description: "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)"
        required: false
        deprecated: true
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceId
        in: query
        description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: externalReferenceSource
        in: query
        description: An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: |-
          Used to request a specific page of data to be returned.

          The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: "0"
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1000
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagingEventListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    post:
      tags:
      - Imaging Events
      summary: Create new imagingEvent metadata records
      description: "Create new imagingEvent metadata records\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /imagingEvents/{imagingEventDbId}/imagingEventcontent' for full imagingEvent upload capability\n\n- ''imagingEventURL'' should be a complete URL describing the location of the imagingEvent. There is no BrAPI call for retrieving \nthe imagingEvent content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the imagingEvent. These could be simple descriptive words, or \nontology references, or full ontology URI's.\n\n- The '/imagingEvents' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons.\n\n- With most imagingEvents, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.\n\n- For top down imagingEvents (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the imagingEvent content, and the Polygon geometry may be used to indicate the border of the \nimagingEvent content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/ImagingEvent_Upload"
      parameters:
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImagingEventNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagingEventListResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
  /imagingevents/{imagingEventDbId}:
    get:
      tags:
      - Imaging Events
      summary: Get the an imagingEvent metadata summary
      description: "Get one imagingEvent metadata object\n\nImplementation Notes\n\n- ''imagingEventURL'' should be a complete URL describing the location of the imagingEvent. There is no BrAPI call for \nretrieving the imagingEvent content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the imagingEvent. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s."
      parameters:
      - name: imagingEventDbId
        in: path
        description: The unique identifier for a imagingEvent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagingEventSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    put:
      tags:
      - Imaging Events
      summary: Update an existing imagingEvent metadata record
      description: "Update an existing imagingEvent metadata record\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /imagingEvents/{imagingEventDbId}/imagingEventcontent' for full imagingEvent update capability\n\n- A server may choose to modify the imagingEvent metadata object based on the actually imagingEvent which has been uploaded. \n\n- ImagingEvent data may be stored in a database or file system. Servers should generate and provide the \"imagingEventURL\" as an \nabsolute path for retrieving the imagingEvent, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the imagingEvent. These could be simple descriptive words, or \nontology references, or full ontology URI's. \n\n- The '/imagingEvents' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons. \n\n- With most imagingEvents, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n\n- For top down imagingEvents (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the imagingEvent content, and the Polygon geometry may be used to indicate the border of the \nimagingEvent content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/ImagingEvent_Upload"
      parameters:
      - name: imagingEventDbId
        in: path
        description: The unique identifier for a imagingEvent
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
        required: false
        style: simple
        explode: false
        schema:
          pattern: ^Bearer .*$
          type: string
        example: Bearer XXXX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagingEventNewRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagingEventSingleResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
              example: |-
                ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

                ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

                ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
components:
  schemas:
    AnalysisQueryResponse:
      required:
      - file
      type: object
      properties:
        file:
          type: string
          description: A URL download for the response file.
          example: https://imagebreed.org/dl/file1
    AssignPlotPolygonsRequest:
      required:
      - drone_run_field_trial_id
      type: object
      properties:
        assign_plot_polygons_type:
          type: string
          description: The type of plot polygons being created and assigned.
          example: â€˜observation_unit_polygon_nir_imageryâ€™
        drone_run_band_project_id:
          type: integer
          description: The database drone run band identifier for which the plot polygons belongs to.
          example: 203
        image_id:
          type: integer
          description: The database image identifier for the image you want to assign plot polygons to.
          example: 1900
        stock_polygons:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties:
                x:
                  type: integer
                y:
                  type: integer
          description: The keys of the object are the plot names and the values are an array of length 4 containing objects denoting the x and y coordinates of the polygon. All plots in the field trial should be included. All polygons should have 4 bounding points.
          example:
            "2018_NYH2_plot_1":
            - x: 100
              y: 100
            - x: 120
              y: 100
            - x: 120
              y: 80
            - x: 100
              y: 80
            "2018_NYH2_plot_2":
            - x: 200
              y: 100
            - x: 220
              y: 100
            - x: 220
              y: 80
            - x: 200
              y: 80
    AssignPlotPolygonsResponse:
      type: object
      properties:
        error:
          type: string
          description: A message describing any errors encountered.
          example: Error Polygon for 2018_NYH2_plot_200 should be 4 long.
        success:
          type: string
          description: A message describing whether the assigned plot polygon images were saved in the database.
          example: All plot polygon images were saved successfully.
    CalculateFourierTransformRequest:
      required:
      - drone_run_field_trial_id
      type: object
      properties:
        drone_run_band_project_id:
          type: integer
          description: The database identifier for the drone run band that the transformed image belongs to.
          example: 1002
        drone_run_band_project_type:
          type: string
          description: The spectral category of the drone run band.
          example: NIR (780-3000nm)
          enum:
          - Black and White Image
          - RGB Color Image
          - Blue (450-520nm)
          - Green (515-600nm)
          - Red (600-690nm)
          - Red Edge (690-750nm)
          - NIR (780-3000nm)
          - MIR (3000-50000nm)
          - FIR (50000-1000000nm)
          - Thermal IR (9000-14000nm)
        high_pass_filter:
          type: integer
          description: The high pass filter to apply.
          example: 20
          enum:
          - 20
          - 30
          - 40
        high_pass_filter_type:
          type: string
          description: The criteria of Fourier transform high-pass filter to perform.
          example: frequency
          enum:
          - frequency
          - magnitude
        image_id:
          type: integer
          description: The database identifier for the image to calculate Fourier transform for.
          example: 10
        image_type:
          type: string
          description: The type of image for which to calculate the Fourier transform on.
          example: denoised_stitched_drone_imagery
    CalculateFourierTransformResponse:
      type: object
      properties:
        ft_image_fullpath:
          type: string
          description: File path for Fourier transformed image on the server.
          example: /export/images/image707
        ft_image_id:
          type: integer
          description: The database identifier for the Fourier transformed image.
          example: 707
        ft_image_url:
          type: string
          description: URL for downloading the Fourier transformed image..
          example: https://imagebreed.org/dl/image/707
    CalculateVegetativeIndexRequest:
      required:
      - drone_run_field_trial_id
      type: object
      properties:
        drone_run_band_project_id:
          type: integer
          description: The database identifier for the drone run band that the vegetation index belongs to.
          example: 1002
        image_id:
          type: integer
          description: The database identifier for the image to calculate a vegetation index for.
          example: 10
        image_type:
          type: string
          description: The type of image for which to calculate the vegetation index on.
          example: NRN
          enum:
          - BGR
          - NRN
          - NReN
        vegetative_index:
          type: string
          description: The type of vegetation index to calculate.
          example: NDVI
          enum:
          - TGI
          - VARI
          - NDVI
    CalculateVegetativeIndexResponse:
      type: object
      properties:
        index_image_fullpath:
          type: string
          description: File path for index image on the server.
          example: /export/images/image707
        index_image_id:
          type: integer
          description: The database identifier for the vegetation index image.
          example: 707
        index_image_url:
          type: string
          description: URL for downloading the index image.
          example: https://imagebreed.org/dl/image/707
    Context:
      title: context
      type: array
      description: "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context"
      example:
      - https://brapi.org/jsonld/context/metadata.jsonld
      items:
        type: string
        format: uri
    CropImageResponse:
      required:
      - cropped_image_fullpath
      - cropped_image_id
      - cropped_image_url
      type: object
      properties:
        cropped_image_fullpath:
          type: string
          description: File path for cropped image on the server.
          example: /export/images/image705
        cropped_image_id:
          type: integer
          description: The database identifier for the cropped image.
          example: 705
        cropped_image_url:
          type: string
          description: URL for downloading the cropped image.
          example: https://imagebreed.org/dl/image/705
    DeleteDroneRunResponse:
      required:
      - error
      - success
      type: object
      properties:
        error:
          type: string
          description: Status message indicating errors.
          example: Must be logged in.
        success:
          type: string
          description: Status message indicating completion.
          example: Image deleted successfully.
    DenoiseResponse:
      required:
      - cropped_image_fullpath
      - cropped_image_id
      - cropped_image_url
      type: object
      properties:
        denoised_image_fullpath:
          type: string
          description: File path for denoised image on the server.
          example: /export/images/image703
        denoised_image_id:
          type: integer
          description: The database identifier for the denoised image.
          example: 703
        denoised_image_url:
          type: string
          description: URL for downloading the denoised image.
          example: https://imagebreed.org/dl/image/703
    ExternalReferences:
      title: ExternalReferences
      type: array
      description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
      example:
      - referenceId: doi:10.155454/12341234
        referenceSource: DOI
      - referenceId: 75a50e76
        referenceSource: Remote Data Collection Upload Tool
      items:
        $ref: '#/components/schemas/ExternalReferences_inner'
    GeneratePhenotypesRequest:
      required:
      - drone_run_project_id
      type: object
      properties:
        drone_run_project_id:
          type: integer
          description: The database identifier for the drone run to calculate phenotypes for.
          example: 101
        phenotype_types:
          type: array
          description: An array indicating the type of phenotypes to generate.
          example:
          - zonal
          items:
            type: string
            enum:
            - zonal
        time_cvterm_id:
          type: integer
          description: The database identifier for the relative time point of the drone run. e.g. there is a database term for "week 10" or "month 2". This time term is used to annotate the generated phenotype values.
          example: 3022
    GeneratePhenotypesResponse:
      type: object
      properties:
        error:
          type: string
          description: A message indicating any errors.
          example: Must be logged in.
        success:
          type: string
          description: A message indicating if the phenotypes were saved successfully.
          example: The plot image phenotypes were saved successfully.
    GetContoursResponse:
      required:
      - contours_image_fullpath
      - contours_image_id
      - contours_image_url
      type: object
      properties:
        contours_image_fullpath:
          type: string
          description: File path for contours image on the server.
          example: â€˜/export/images/image702â€™
        contours_image_id:
          type: integer
          description: The database identifier for the generated contours image.
          example: 702
        contours_image_url:
          type: string
          description: URL for downloading the generated contours image.
          example: â€˜https://imagebreed.org/dl/image/702â€™
    GetImageResponse:
      required:
      - image_fullpath
      - image_url
      type: object
      properties:
        image_fullpath:
          type: string
          description: File path for image on the server.
          example: /export/images/image704
        image_url:
          type: string
          description: URL for downloading the image.
          example: https://imagebreed.org/dl/image/19
    Image:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
        copyright:
          type: string
          description: The copyright information of this image. Example 'Copyright 2018 Bob Robertson'
          example: Copyright 2018 Bob Robertson
        description:
          type: string
          description: The human readable description of an image.
          example: This is a picture of a tomato
        descriptiveOntologyTerms:
          type: array
          description: A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
          example:
          - doi:10.1002/0470841559
          - Red
          - ncbi:0300294
          items:
            type: string
        externalReferences:
          title: ExternalReferences
          type: array
          description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
          example:
          - referenceId: doi:10.155454/12341234
            referenceSource: DOI
          - referenceId: 75a50e76
            referenceSource: Remote Data Collection Upload Tool
          items:
            $ref: '#/components/schemas/ExternalReferences_inner'
        imageDbId:
          type: string
          description: The unique identifier of an image
          example: a55efb9c
        imageFileName:
          type: string
          description: The name of the image file. Might be the same as 'imageName', but could be different.
          example: image_0000231.jpg
        imageFileSize:
          type: integer
          description: The size of the image in Bytes.
          example: 50000
        imageHeight:
          type: integer
          description: The height of the image in Pixels.
          example: 550
        imageLocation:
          $ref: '#/components/schemas/GeoJSON'
        imageName:
          type: string
          description: The human readable name of an image. Might be the same as 'imageFileName', but could be different.
          example: Tomato Image 1
        imageTimeStamp:
          type: string
          description: The date and time the image was taken
          format: date-time
        imageURL:
          type: string
          description: The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.
          example: https://wiki.brapi.org/images/tomato
        imageWidth:
          type: integer
          description: The width of the image in Pixels.
          example: 700
        mimeType:
          pattern: image/.*
          type: string
          description: The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc
          example: image/jpeg
        observationDbIds:
          type: array
          description: A list of observation Ids this image is associated with, if applicable.
          example:
          - d05dd235
          - 8875177d
          - c08e81b6
          items:
            type: string
        observationUnitDbId:
          type: string
          description: The related observation unit identifier, if relevant.
          example: b7e690b6
      x-brapi-metadata:
        description: The metadata for an image file that is connected to some phenotypic observation data.
        module: BrAPI-Phenotyping
        primaryModel: true
        title: Image
    ImageCollection:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
        compressedImagesFileURI:
          type: string
          description: If this collection of images exists as a compressed file (zip, tar, etc), compressedImagesFileURI should point to that file location
        copyright:
          type: string
          description: The copyright information of this image collection. Example 'Copyright 2018 Bob Robertson'
          example: Copyright 2018 Bob Robertson
        description:
          type: string
          description: The human readable description of an image collection.
          example: This is a picture of a tomato
        descriptiveOntologyTerms:
          type: array
          description: A list of terms to formally describe the collection of images. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
          example:
          - doi:10.1002/0470841559
          - Red
          - ncbi:0300294
          items:
            type: string
        externalReferences:
          title: ExternalReferences
          type: array
          description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
          example:
          - referenceId: doi:10.155454/12341234
            referenceSource: DOI
          - referenceId: 75a50e76
            referenceSource: Remote Data Collection Upload Tool
          items:
            $ref: '#/components/schemas/ExternalReferences_inner'
        imageCollectionDbId:
          type: string
          description: The unique identifier of an image collection
          example: 5e9cafb5
        imageCollectionName:
          type: string
          description: The human readable name of an image collection.
          example: Drone Run 123 Red stream images
        imagingEventDbId:
          type: string
          description: The imaging event that created this collection of images
        stichedImageDbId:
          type: string
          description: If this collection of images has been combined or stiched in some way to produce a single large image, and that stiched image is stored in the database, then stichedImageDbId should point to its database identifier
        stichedImageURI:
          type: string
          description: If this collection of images has been combined or stiched in some way to produce a single large image, stichedImageURI should point to that large image file location
    ImageCollectionNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
        compressedImagesFileURI:
          type: string
          description: If this collection of images exists as a compressed file (zip, tar, etc), compressedImagesFileURI should point to that file location
        copyright:
          type: string
          description: The copyright information of this image collection. Example 'Copyright 2018 Bob Robertson'
          example: Copyright 2018 Bob Robertson
        description:
          type: string
          description: The human readable description of an image collection.
          example: This is a picture of a tomato
        descriptiveOntologyTerms:
          type: array
          description: A list of terms to formally describe the collection of images. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
          example:
          - doi:10.1002/0470841559
          - Red
          - ncbi:0300294
          items:
            type: string
        externalReferences:
          title: ExternalReferences
          type: array
          description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
          example:
          - referenceId: doi:10.155454/12341234
            referenceSource: DOI
          - referenceId: 75a50e76
            referenceSource: Remote Data Collection Upload Tool
          items:
            $ref: '#/components/schemas/ExternalReferences_inner'
        imageCollectionName:
          type: string
          description: The human readable name of an image collection.
          example: Drone Run 123 Red stream images
        imagingEventDbId:
          type: string
          description: The imaging event that created this collection of images
        stichedImageDbId:
          type: string
          description: If this collection of images has been combined or stiched in some way to produce a single large image, and that stiched image is stored in the database, then stichedImageDbId should point to its database identifier
        stichedImageURI:
          type: string
          description: If this collection of images has been combined or stiched in some way to produce a single large image, stichedImageURI should point to that large image file location
    ImageCollectionSearchRequest:
      type: object
      properties:
        commonCropNames:
          type: array
          description: "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server."
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
        descriptiveOntologyTerms:
          type: array
          description: A list of terms to formally describe the imageCollection to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
          example:
          - doi:10.1002/0470841559
          - Red
          - ncbi:0300294
          items:
            type: string
        externalReferenceIDs:
          type: array
          description: "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)"
          example:
          - doi:10.155454/12341234
          - 14a19841
          deprecated: true
          items:
            type: string
        externalReferenceIds:
          type: array
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - doi:10.155454/12341234
          - 14a19841
          items:
            type: string
        externalReferenceSources:
          type: array
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - DOI
          - Field App Name
          items:
            type: string
        imageCollectionDbIds:
          type: array
          description: A list of imageCollection Ids to search for
          example:
          - 564b64a6
          - 0d122d1d
          items:
            type: string
        imageCollectionFileNames:
          type: array
          description: ImageCollection file names to search for.
          example:
          - imageCollection_01032019.jpg
          - picture_field_1234.jpg
          items:
            type: string
        imageCollectionFileSizeMax:
          type: integer
          description: A maximum imageCollection file size to search for.
          example: 20000000
        imageCollectionFileSizeMin:
          type: integer
          description: A minimum imageCollection file size to search for.
          example: 1000
        imageCollectionHeightMax:
          type: integer
          description: A maximum imageCollection height to search for.
          example: 1080
        imageCollectionHeightMin:
          type: integer
          description: A minimum imageCollection height to search for.
          example: 720
        imageCollectionLocation:
          $ref: '#/components/schemas/GeoJSONSearchArea'
        imageCollectionNames:
          type: array
          description: Human readable names to search for.
          example:
          - ImageCollection 43
          - Tractor in field
          items:
            type: string
        imageCollectionTimeStampRangeEnd:
          type: string
          description: The latest timestamp to search for.
          format: date-time
        imageCollectionTimeStampRangeStart:
          type: string
          description: The earliest timestamp to search for.
          format: date-time
        imageCollectionWidthMax:
          type: integer
          description: A maximum imageCollection width to search for.
          example: 1920
        imageCollectionWidthMin:
          type: integer
          description: A minimum imageCollection width to search for.
          example: 1280
        mimeTypes:
          type: array
          description: A set of imageCollection file types to search for.
          example:
          - imageCollection/jpg
          - imageCollection/jpeg
          - imageCollection/gif
          items:
            pattern: imageCollection/.*
            type: string
        observationDbIds:
          type: array
          description: A list of observation Ids this imageCollection is associated with to search for
          example:
          - "47326456"
          - fc9823ac
          items:
            type: string
        observationUnitDbIds:
          type: array
          description: A set of observation unit identifiers to search for.
          example:
          - f5e4b273
          - 328c9424
          items:
            type: string
        page:
          type: integer
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
        programDbIds:
          type: array
          description: "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server."
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
        programNames:
          type: array
          description: |-
            Use this parameter to only return results associated with the given program names. Program names are not required to be unique.

            Use `GET /programs` to find the list of available programs on a server.
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
    ImageMutation:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
        externalReferences:
          $ref: '#/components/schemas/ExternalReferences'
        imageInputType:
          type: array
          description: The type of input an image mutation is expecting. A single image, a list/collection of images, or a list of image collections.
          example:
          - IMAGE_LIST
          - IMAGE_COLLECTION_SINGLE
          items:
            type: string
            enum:
            - IMAGE_SINGLE
            - IMAGE_LIST
            - IMAGE_COLLECTION_SINGLE
            - IMAGE_COLLECTION_LIST
        imageMutationDbId:
          type: string
          description: Unique database identifier for an image mutation
          example: 224ab7d3
        imageMutationDescription:
          type: string
          description: Human readable description of an image mutation
          example: For removing the background using an upper and lower threshold. Uses OpenCV threshold.
        imageMutationName:
          type: string
          description: Human readable name for an image mutation
          example: Remove Background
        imageMutationParameters:
          type: array
          description: list of possible parameters used by an image mutation
          items:
            $ref: '#/components/schemas/ImageMutation_imageMutationParameters'
    ImageMutationRunRequest:
      type: object
      properties:
        imageMutationDbId:
          type: string
          description: Unique database identifier for an image mutation
          example: 224ab7d3
        imageMutationParameters:
          type: array
          description: list of parameters set for a specific image mutation run
          items:
            $ref: '#/components/schemas/ImageMutationRunRequest_imageMutationParameters'
        imagingEventDbId:
          type: string
          description: Unique database identifier for an imaging event
          example: 32aa577d
        inputImageCollectionDbIds:
          type: array
          description: List of image collections to be used as input for a mutation run
          example: []
          items:
            type: string
        inputImageDbIds:
          type: array
          description: List of images to be used as input for a mutation run
          example:
          - 34a22db7
          items:
            type: string
    ImageMutationRunResponse:
      type: object
      properties:
        imageMutationDbId:
          type: string
          description: Unique database identifier for an image mutation
          example: 224ab7d3
        imageMutationParameters:
          type: array
          description: list of parameters set for a specific image mutation run
          items:
            $ref: '#/components/schemas/ImageMutationRunRequest_imageMutationParameters'
        mutatedImages:
          type: array
          items:
            $ref: '#/components/schemas/ImageMutationRunResponse_mutatedImages'
    ImageNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
        copyright:
          type: string
          description: The copyright information of this image. Example 'Copyright 2018 Bob Robertson'
          example: Copyright 2018 Bob Robertson
        description:
          type: string
          description: The human readable description of an image.
          example: This is a picture of a tomato
        descriptiveOntologyTerms:
          type: array
          description: A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
          example:
          - doi:10.1002/0470841559
          - Red
          - ncbi:0300294
          items:
            type: string
        externalReferences:
          title: ExternalReferences
          type: array
          description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
          example:
          - referenceId: doi:10.155454/12341234
            referenceSource: DOI
          - referenceId: 75a50e76
            referenceSource: Remote Data Collection Upload Tool
          items:
            $ref: '#/components/schemas/ExternalReferences_inner'
        imageFileName:
          type: string
          description: The name of the image file. Might be the same as 'imageName', but could be different.
          example: image_0000231.jpg
        imageFileSize:
          type: integer
          description: The size of the image in Bytes.
          example: 50000
        imageHeight:
          type: integer
          description: The height of the image in Pixels.
          example: 550
        imageLocation:
          $ref: '#/components/schemas/GeoJSON'
        imageName:
          type: string
          description: The human readable name of an image. Might be the same as 'imageFileName', but could be different.
          example: Tomato Image 1
        imageTimeStamp:
          type: string
          description: The date and time the image was taken
          format: date-time
        imageURL:
          type: string
          description: The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.
          example: https://wiki.brapi.org/images/tomato
        imageWidth:
          type: integer
          description: The width of the image in Pixels.
          example: 700
        mimeType:
          pattern: image/.*
          type: string
          description: The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc
          example: image/jpeg
        observationDbIds:
          type: array
          description: A list of observation Ids this image is associated with, if applicable.
          example:
          - d05dd235
          - 8875177d
          - c08e81b6
          items:
            type: string
        observationUnitDbId:
          type: string
          description: The related observation unit identifier, if relevant.
          example: b7e690b6
    ImageSearchRequest:
      type: object
      properties:
        commonCropNames:
          type: array
          description: "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server."
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
        descriptiveOntologyTerms:
          type: array
          description: A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
          example:
          - doi:10.1002/0470841559
          - Red
          - ncbi:0300294
          items:
            type: string
        externalReferenceIDs:
          type: array
          description: "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)"
          example:
          - doi:10.155454/12341234
          - 14a19841
          deprecated: true
          items:
            type: string
        externalReferenceIds:
          type: array
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - doi:10.155454/12341234
          - 14a19841
          items:
            type: string
        externalReferenceSources:
          type: array
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - DOI
          - Field App Name
          items:
            type: string
        imageDbIds:
          type: array
          description: A list of image Ids to search for
          example:
          - 564b64a6
          - 0d122d1d
          items:
            type: string
        imageFileNames:
          type: array
          description: Image file names to search for.
          example:
          - image_01032019.jpg
          - picture_field_1234.jpg
          items:
            type: string
        imageFileSizeMax:
          type: integer
          description: A maximum image file size to search for.
          example: 20000000
        imageFileSizeMin:
          type: integer
          description: A minimum image file size to search for.
          example: 1000
        imageHeightMax:
          type: integer
          description: A maximum image height to search for.
          example: 1080
        imageHeightMin:
          type: integer
          description: A minimum image height to search for.
          example: 720
        imageLocation:
          $ref: '#/components/schemas/GeoJSONSearchArea'
        imageNames:
          type: array
          description: Human readable names to search for.
          example:
          - Image 43
          - Tractor in field
          items:
            type: string
        imageTimeStampRangeEnd:
          type: string
          description: The latest timestamp to search for.
          format: date-time
        imageTimeStampRangeStart:
          type: string
          description: The earliest timestamp to search for.
          format: date-time
        imageWidthMax:
          type: integer
          description: A maximum image width to search for.
          example: 1920
        imageWidthMin:
          type: integer
          description: A minimum image width to search for.
          example: 1280
        mimeTypes:
          type: array
          description: A set of image file types to search for.
          example:
          - image/jpg
          - image/jpeg
          - image/gif
          items:
            pattern: image/.*
            type: string
        observationDbIds:
          type: array
          description: A list of observation Ids this image is associated with to search for
          example:
          - "47326456"
          - fc9823ac
          items:
            type: string
        observationUnitDbIds:
          type: array
          description: A set of observation unit identifiers to search for.
          example:
          - f5e4b273
          - 328c9424
          items:
            type: string
        page:
          type: integer
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
        programDbIds:
          type: array
          description: "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server."
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
        programNames:
          type: array
          description: |-
            Use this parameter to only return results associated with the given program names. Program names are not required to be unique.

            Use `GET /programs` to find the list of available programs on a server.
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
    ImagingEvent:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
        cameraDescription:
          type: string
          description: Information about the camera taking the imagingEvents
        description:
          type: string
          description: The human readable description of an imagingEvent imaging event
          example: Drone Flight over field A
        equipmentDescription:
          type: string
          description: The equipemnt being used to move the camera (drone, rover, person, etc)
        externalReferences:
          title: ExternalReferences
          type: array
          description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
          example:
          - referenceId: doi:10.155454/12341234
            referenceSource: DOI
          - referenceId: 75a50e76
            referenceSource: Remote Data Collection Upload Tool
          items:
            $ref: '#/components/schemas/ExternalReferences_inner'
        imageCollectionDbIds:
          type: array
          description: An array of Image Collections DbIds connected to this imaging event
          items:
            type: string
        imagingEventDbId:
          type: string
          description: The unique identifier of an Imaging Event
          example: a55efb9c
        imagingEventName:
          type: string
        imagingEventTimeStamp:
          type: string
          description: Date and time when a set of imagingEvents were taken
          format: date-time
        studyDbId:
          type: string
        studyName:
          type: string
    ImagingEventNewRequest:
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
          description: A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.
        cameraDescription:
          type: string
          description: Information about the camera taking the imagingEvents
        description:
          type: string
          description: The human readable description of an imagingEvent imaging event
          example: Drone Flight over field A
        equipmentDescription:
          type: string
          description: The equipemnt being used to move the camera (drone, rover, person, etc)
        externalReferences:
          title: ExternalReferences
          type: array
          description: An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.
          example:
          - referenceId: doi:10.155454/12341234
            referenceSource: DOI
          - referenceId: 75a50e76
            referenceSource: Remote Data Collection Upload Tool
          items:
            $ref: '#/components/schemas/ExternalReferences_inner'
        imageCollectionDbIds:
          type: array
          description: An array of Image Collections DbIds connected to this imaging event
          items:
            type: string
        imagingEventName:
          type: string
        imagingEventTimeStamp:
          type: string
          description: Date and time when a set of imagingEvents were taken
          format: date-time
        studyDbId:
          type: string
        studyName:
          type: string
    ImagingEventSearchRequest:
      type: object
      properties:
        commonCropNames:
          type: array
          description: "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server."
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
        externalReferenceIDs:
          type: array
          description: "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)"
          example:
          - doi:10.155454/12341234
          - 14a19841
          deprecated: true
          items:
            type: string
        externalReferenceIds:
          type: array
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - doi:10.155454/12341234
          - 14a19841
          items:
            type: string
        externalReferenceSources:
          type: array
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - DOI
          - Field App Name
          items:
            type: string
        imagingEventDbIds:
          type: array
          description: A list of imagingEvent Ids to search for
          example:
          - 564b64a6
          - 0d122d1d
          items:
            type: string
        imagingEventNames:
          type: array
          description: Human readable names to search for.
          example:
          - ImagingEvent 43
          - Tractor in field
          items:
            type: string
        imagingEventTimeStampRangeEnd:
          type: string
          description: The latest timestamp to search for.
          format: date-time
        imagingEventTimeStampRangeStart:
          type: string
          description: The earliest timestamp to search for.
          format: date-time
        page:
          type: integer
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
        programDbIds:
          type: array
          description: "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server."
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
        programNames:
          type: array
          description: |-
            Use this parameter to only return results associated with the given program names. Program names are not required to be unique.

            Use `GET /programs` to find the list of available programs on a server.
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
    MaskRemoveBackgroundResponse:
      required:
      - masked_image_fullpath
      - masked_image_id
      - masked_image_url
      type: object
      properties:
        masked_image_fullpath:
          type: string
          description: File path for background removed image on the server.
          example: /export/images/image706
        masked_image_id:
          type: integer
          description: The database identifier for the background removed image.
          example: 706
        masked_image_url:
          type: string
          description: URL for downloading the background removed image.
          example: https://imagebreed.org/dl/image/706
    MergeBandsResponse:
      required:
      - merged_image_fullpath
      - merged_image_id
      - merged_image_url
      type: object
      properties:
        merged_image_fullpath:
          type: string
          description: File path for merged image on the server.
          example: /export/images/image707
        merged_image_id:
          type: integer
          description: The database identifier for the merged removed image.
          example: 707
        merged_image_url:
          type: string
          description: URL for downloading the merged image.
          example: https://imagebreed.org/dl/image/707
    RemoveBackgroundSaveRequest:
      required:
      - drone_run_field_trial_id
      type: object
      properties:
        drone_run_band_project_id:
          type: integer
          description: The database drone run band identifier for which the background removed image belongs to.
          example: 203
        image_id:
          type: integer
          description: The database image identifier for the image to remove the background from.
          example: 1900
        image_type:
          type: string
          description: The type of the background removed image that is generated.
          example: threshold_background_removed_stitched_drone_imagery
          enum:
          - threshold_background_removed_tgi_stitched_drone_imagery
          - threshold_background_removed_vari_stitched_drone_imagery
          - threshold_background_removed_ndvi_stitched_drone_imagery
          - threshold_background_removed_stitched_drone_imagery
        lower_threshold:
          maximum: 255
          minimum: 0
          type: integer
          description: Threshold value for which to remove pixels with a lower pixel value. Range is 0 to 255.
          example: 20
        upper_threshold:
          maximum: 255
          minimum: 0
          type: integer
          description: Threshold value for which to remove pixels with a higher pixel value. Range is 0 to 255.
          example: 220
    RemoveBackgroundSaveResponse:
      type: object
      properties:
        removed_background_image_fullpath:
          type: string
          description: File path for removed background image on the server.
          example: /export/images/image704
        removed_background_image_id:
          type: integer
          description: The database identifier for the background removed image.
          example: 704
        removed_background_image_url:
          type: string
          description: URL for downloading the background removed image.
          example: https://imagebreed.org/dl/image/704
    RemoveImageResponse:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: Status message indicating any error handling.
          example: Image deleted successfully.
    RotateImageResponse:
      required:
      - rotated_image_fullpath
      - rotated_image_id
      - rotated_image_url
      type: object
      properties:
        rotated_image_fullpath:
          type: string
          description: File path for rotated image on the server.
          example: â€˜/export/images/image701â€™
        rotated_image_id:
          type: integer
          description: The database identifier for the rotated image.
          example: 701
        rotated_image_url:
          type: string
          description: URL for downloading the rotated image.
          example: â€˜https://imagebreed.org/dl/image/701â€™
    SearchRequestParametersCommonCropNames:
      type: object
      properties:
        commonCropNames:
          type: array
          description: "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server."
          example:
          - Tomatillo
          - Paw Paw
          items:
            type: string
    SearchRequestParametersExternalReferences:
      type: object
      properties:
        externalReferenceIDs:
          type: array
          description: "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)"
          example:
          - doi:10.155454/12341234
          - 14a19841
          deprecated: true
          items:
            type: string
        externalReferenceIds:
          type: array
          description: List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)
          example:
          - doi:10.155454/12341234
          - 14a19841
          items:
            type: string
        externalReferenceSources:
          type: array
          description: List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)
          example:
          - DOI
          - Field App Name
          items:
            type: string
    SearchRequestParametersGermplasm:
      type: object
      properties:
        germplasmDbIds:
          type: array
          description: List of IDs which uniquely identify germplasm to search for
          example:
          - e9c6edd7
          - 1b1df4a6
          items:
            type: string
        germplasmNames:
          type: array
          description: List of human readable names to identify germplasm to search for
          example:
          - A0000003
          - A0000477
          items:
            type: string
    SearchRequestParametersLocations:
      type: object
      properties:
        locationDbIds:
          type: array
          description: The location ids to search for
          example:
          - b28911cf
          - 5071d1e4
          items:
            type: string
        locationNames:
          type: array
          description: A human readable names to search for
          example:
          - Location Alpha
          - The Large Hadron Collider
          items:
            type: string
    SearchRequestParametersPaging:
      type: object
      properties:
        page:
          type: integer
          description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
          example: 0
        pageSize:
          type: integer
          description: The size of the pages to be returned. Default is `1000`.
          example: 1000
    SearchRequestParametersPrograms:
      type: object
      properties:
        programDbIds:
          type: array
          description: "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server."
          example:
          - 8f5de35b
          - 0e2d4a13
          items:
            type: string
        programNames:
          type: array
          description: |-
            Use this parameter to only return results associated with the given program names. Program names are not required to be unique.

            Use `GET /programs` to find the list of available programs on a server.
          example:
          - Better Breeding Program
          - Best Breeding Program
          items:
            type: string
    SearchRequestParametersStudies:
      type: object
      properties:
        studyDbIds:
          type: array
          description: List of study identifiers to search for
          example:
          - cf6c4bd4
          - 691e69d6
          items:
            type: string
        studyNames:
          type: array
          description: List of study names to filter search results
          example:
          - The First Bob Study 2017
          - Wheat Yield Trial 246
          items:
            type: string
    SearchRequestParametersTrials:
      type: object
      properties:
        trialDbIds:
          type: array
          description: The ID which uniquely identifies a trial to search for
          example:
          - d2593dc2
          - 9431a731
          items:
            type: string
        trialNames:
          type: array
          description: The human readable name of a trial to search for
          example:
          - All Yield Trials 2016
          - Disease Resistance Study Comparison Group
          items:
            type: string
    StandardProcessApplyResponse:
      required:
      - error
      - success
      type: object
      properties:
        error:
          type: string
          description: A message indicating any errors in the standard process.
          example: Please give a drone run band project id with a standard process defined.
        success:
          type: string
          description: A message indicating if the standard process was applied successfully.
          example: The standard process was applied successfully.
    UploadDroneImageryRequest:
      required:
      - drone_run_field_trial_id
      type: object
      properties:
        drone_image_upload_camera_info:
          type: string
          description: The type of camera used in the drone run. Mainly to distinguish between the Micasense Rededge 5 band camera and color cameras. In the case where the drone run already exists in the database, this key can be left undefined.
          example: micasense_5
          enum:
          - micasense_5
          - ccd_color
          - cmos_color
        drone_image_upload_drone_run_band_stitching:
          type: string
          description: Whether the user intends to upload raw-image captures or previously stitched orthophotomosaic raster images. When uploading raw image captures with the intention of stitching into an orthophotomosaic, use 'yes'. In the case where the drone run already exists in the database, this key can be left undefined.
          example: "no"
          enum:
          - "yes"
          - "no"
        drone_run_band_description_1:
          type: string
          description: A description for the drone run band being uploaded to the drone run of the field trial. Multiple bands can be uploaded using the key index, e.g. 1 to 5. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.
          example: Red band from Micasense Red Edge Camera processed in Pix4
        drone_run_band_name_1:
          type: string
          description: A name for the drone run band being uploaded to the drone run of the field trial. Multiple bands can be uploaded using the key index, e.g. 1 to 5. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.
          example: 07012018_NYH2_Red
        drone_run_band_number:
          type: integer
          description: The number of separate image bands to be uploaded e.g. 5 when using the Micasense Rededge 5 band camera. This is used when uploading previously stitched orthophotomosaic raster images e.g. drone_image_upload_drone_run_band_stitching should be 'no'. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.
          example: 5
        drone_run_band_stitched_ortho_image_1:
          type: string
          description: Multiple bands can be uploaded using the key index, e.g. 1 to 5. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.
          example: Uploadfile('/upload/red_orthophotomosaic.png')
        drone_run_band_type_1:
          type: string
          description: A type for the drone run band being uploaded to the drone run of the field trial. Multiple bands can be uploaded using the key index, e.g. 1 to 5. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.
          example: Red (600-690nm)
          enum:
          - Black and White Image
          - RGB Color Image
          - Blue (450-520nm)
          - Green (515-600nm)
          - Red (600-690nm)
          - Red Edge (690-750nm)
          - NIR (780-3000nm)
          - MIR (3000-50000nm)
          - FIR (50000-1000000nm)
          - Thermal IR (9000-14000nm)
        drone_run_date:
          type: string
          description: The date that the new drone run was flown. In the case where the drone run already exists in the database, this key can be left undefined.
          format: date-time
        drone_run_description:
          type: string
          description: A description for the new drone run. In the case where the drone run already exists in the database, this key can be left undefined.
          example: The flight captured the NYH2 field at 1:00pm at an altitude of 20m and a speed of 5km/hr
        drone_run_field_trial_id:
          type: integer
          description: The database identifier for the field trial. The field trial represents the experimental design layout and metadata.
          example: 1202
        drone_run_id:
          type: integer
          description: The database identifier for the drone run. This key is used when a drone run already exists in the database and additional drone images are being added to it. In the case where the drone run is new, this key can be left undefined.
          example: 102
        drone_run_name:
          type: string
          description: The globally unique name for the new drone run for which drone images are being uploaded. In the case where the drone run already exists in the database, this key can be left undefined.
          example: 07012018_NYH2
        drone_run_type:
          type: string
          description: The type for the new drone run. In the case where the drone run already exists in the database, this key can be left undefined.
          example: Aerial Medium to High Res
          enum:
          - Aerial Medium to High Res
          - Aerial Low Res
        upload_drone_images_panel_zipfile:
          type: string
          description: In the case where raw-image captures are being uploaded into ImageBreed for stitching into an orthophotomosaic raster image e.g. drone_image_upload_drone_run_band_stitching is ï¿½yesï¿½, this input is used to upload the Micasense calibration panel captures in a compressed (.zip) file. ImageBreed uses the panel to calibrate the raw-image captures provided via upload_drone_images_zipfile in the case where the images were from the Micasense Rededge 5 band camera. If a Micasense camera was not used, this input can be left undefined.
          example: Uploadfile('/upload/raw_micasense_5_band_panel_captures.zip')
        upload_drone_images_zipfile:
          type: string
          description: In the case where raw-image captures are being uploaded into ImageBreed for stitching into an orthophotomosaic raster image e.g. drone_image_upload_drone_run_band_stitching is ï¿½yesï¿½, this input is used to upload a compressed (.zip) file with all raw images. The maximum upload size is 3GB.
          example: Uploadfile('/upload/raw_micasense_5_band_captures.zip')
    UploadDroneImageryResponse:
      required:
      - drone_run_project_id
      type: object
      properties:
        drone_run_band_image_ids:
          type: array
          description: Database identifiers for the new orthophotomosaic image(s) saved to each new drone run band project, one to one.
          example:
          - 8001
          - 8002
          - 8003
          - 8004
          - 8005
          items:
            type: integer
        drone_run_band_image_urls:
          type: array
          description: Database web URLs for the new orthophotomisaic image(s) saved to each new drone run band project, one to one.
          example:
          - https://imagebreed.org/image/blue.png
          - https://imagebreed.org/image/green.png
          - https://imagebreed.org/image/red.png
          - https://imagebreed.org/image/nir.png
          - https://imagebreed.org/image/rededge.png
          items:
            type: string
        drone_run_band_project_ids:
          type: array
          description: Database identifiers for the new drone run band project(s) which were saved.
          example:
          - 2001
          - 2002
          - 2003
          - 2004
          - 2005
          items:
            type: integer
        drone_run_project_id:
          type: integer
          description: The drone run project under which the new drone run band projects were created and in which the orthophotomosaic images were saved.
          example: 100
        error:
          type: string
          description: A message describing any errors encountered during upload of drone images.
          example: Please give a new drone run band name.
        success:
          type: string
          description: A message describing whether the drone images were uploaded into the database.
          example: The upload completed successfully.
    dataFile:
      required:
      - fileURL
      type: object
      properties:
        fileDescription:
          type: string
          description: A human readable description of the file contents
          example: This is an Excel data file
        fileMD5Hash:
          type: string
          description: The MD5 Hash of the file contents to be used as a check sum
          example: c2365e900c81a89cf74d83dab60df146
        fileName:
          type: string
          description: The name of the file
          example: datafile.xlsx
        fileSize:
          type: integer
          description: The size of the file in bytes
          example: 4398
        fileType:
          type: string
          description: The type or format of the file. Preferably MIME Type.
          example: application/vnd.ms-excel
        fileURL:
          type: string
          description: The absolute URL where the file is located
          format: uri
          example: https://wiki.brapi.org/examples/datafile.xlsx
      description: A dataFile contains a URL and the relevant file metadata to represent a file
    geoJSON:
      title: GeoJSON
      type: object
      properties:
        geometry:
          title: GeoJSON Geometry
          type: object
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          discriminator:
            propertyName: type
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
          oneOf:
          - type: object
            properties:
              coordinates:
                minItems: 2
                type: array
                description: A single position
                example:
                - -76.506042
                - 42.417373
                - 123
                items:
                  type: number
              type:
                type: string
                description: The literal string "Point"
                example: Point
                default: Point
            description: |-
              Copied from RFC 7946 Section 3.1.1

              A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
              easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
          - type: object
            properties:
              coordinates:
                type: array
                description: An array of linear rings
                example:
                - - - -77.456654
                    - 42.241133
                    - 494
                  - - -75.414133
                    - 41.508282
                    - 571
                  - - -76.506042
                    - 42.417373
                    - 123
                  - - -77.456654
                    - 42.241133
                    - 346
                items:
                  minItems: 4
                  type: array
                  description: An array of at least four positions where the first equals the last
                  example:
                  - - -77.456654
                    - 42.241133
                    - 494
                  - - -75.414133
                    - 41.508282
                    - 571
                  - - -76.506042
                    - 42.417373
                    - 123
                  - - -77.456654
                    - 42.241133
                    - 346
                  items:
                    minItems: 2
                    type: array
                    description: A single position
                    example:
                    - -76.506042
                    - 42.417373
                    - 123
                    items:
                      type: number
              type:
                type: string
                description: The literal string "Polygon"
                example: Polygon
                default: Polygon
            description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
        type:
          type: string
          description: The literal string "Feature"
          example: Feature
          default: Feature
      description: |-
        One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.

        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    geoJSONSearchArea:
      title: GeoJSONSearchArea
      type: object
      properties:
        geometry:
          title: GeoJSON Geometry
          type: object
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          discriminator:
            propertyName: type
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
          oneOf:
          - type: object
            properties:
              coordinates:
                minItems: 2
                type: array
                description: A single position
                example:
                - -76.506042
                - 42.417373
                - 123
                items:
                  type: number
              type:
                type: string
                description: The literal string "Point"
                example: Point
                default: Point
            description: |-
              Copied from RFC 7946 Section 3.1.1

              A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
              easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
          - type: object
            properties:
              coordinates:
                type: array
                description: An array of linear rings
                example:
                - - - -77.456654
                    - 42.241133
                    - 494
                  - - -75.414133
                    - 41.508282
                    - 571
                  - - -76.506042
                    - 42.417373
                    - 123
                  - - -77.456654
                    - 42.241133
                    - 346
                items:
                  minItems: 4
                  type: array
                  description: An array of at least four positions where the first equals the last
                  example:
                  - - -77.456654
                    - 42.241133
                    - 494
                  - - -75.414133
                    - 41.508282
                    - 571
                  - - -76.506042
                    - 42.417373
                    - 123
                  - - -77.456654
                    - 42.241133
                    - 346
                  items:
                    minItems: 2
                    type: array
                    description: A single position
                    example:
                    - -76.506042
                    - 42.417373
                    - 123
                    items:
                      type: number
              type:
                type: string
                description: The literal string "Polygon"
                example: Polygon
                default: Polygon
            description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
        type:
          type: string
          description: The literal string "Feature"
          example: Feature
          default: Feature
      description: "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system."
      example:
        geometry:
          coordinates:
          - - - -77.456654
              - 42.241133
            - - -75.414133
              - 41.508282
            - - -76.506042
              - 42.417373
            - - -77.456654
              - 42.241133
          type: Polygon
        type: Feature
    linearRing:
      minItems: 4
      type: array
      description: An array of at least four positions where the first equals the last
      example:
      - - -77.456654
        - 42.241133
        - 494
      - - -75.414133
        - 41.508282
        - 571
      - - -76.506042
        - 42.417373
        - 123
      - - -77.456654
        - 42.241133
        - 346
      items:
        minItems: 2
        type: array
        description: A single position
        example:
        - -76.506042
        - 42.417373
        - 123
        items:
          type: number
    metadata:
      type: object
      properties:
        datafiles:
          type: array
          description: "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. "
          example: []
          items:
            $ref: '#/components/schemas/dataFile'
        pagination:
          $ref: '#/components/schemas/metadata_pagination'
        status:
          type: array
          description: "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information."
          items:
            $ref: '#/components/schemas/status'
      description: An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information.
    pointGeometry:
      type: object
      properties:
        coordinates:
          minItems: 2
          type: array
          description: A single position
          example:
          - -76.506042
          - 42.417373
          - 123
          items:
            type: number
        type:
          type: string
          description: The literal string "Point"
          example: Point
          default: Point
      description: |-
        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    polygon:
      type: array
      description: An array of linear rings
      example:
      - - - -77.456654
          - 42.241133
          - 494
        - - -75.414133
          - 41.508282
          - 571
        - - -76.506042
          - 42.417373
          - 123
        - - -77.456654
          - 42.241133
          - 346
      items:
        minItems: 4
        type: array
        description: An array of at least four positions where the first equals the last
        example:
        - - -77.456654
          - 42.241133
          - 494
        - - -75.414133
          - 41.508282
          - 571
        - - -76.506042
          - 42.417373
          - 123
        - - -77.456654
          - 42.241133
          - 346
        items:
          minItems: 2
          type: array
          description: A single position
          example:
          - -76.506042
          - 42.417373
          - 123
          items:
            type: number
    polygonGeometry:
      type: object
      properties:
        coordinates:
          type: array
          description: An array of linear rings
          example:
          - - - -77.456654
              - 42.241133
              - 494
            - - -75.414133
              - 41.508282
              - 571
            - - -76.506042
              - 42.417373
              - 123
            - - -77.456654
              - 42.241133
              - 346
          items:
            minItems: 4
            type: array
            description: An array of at least four positions where the first equals the last
            example:
            - - -77.456654
              - 42.241133
              - 494
            - - -75.414133
              - 41.508282
              - 571
            - - -76.506042
              - 42.417373
              - 123
            - - -77.456654
              - 42.241133
              - 346
            items:
              minItems: 2
              type: array
              description: A single position
              example:
              - -76.506042
              - 42.417373
              - 123
              items:
                type: number
        type:
          type: string
          description: The literal string "Polygon"
          example: Polygon
          default: Polygon
      description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
    position:
      minItems: 2
      type: array
      description: A single position
      example:
      - -76.506042
      - 42.417373
      - 123
      items:
        type: number
    status:
      required:
      - message
      - messageType
      type: object
      properties:
        message:
          type: string
          description: A short message concerning the status of this request/response
          example: Request accepted, response successful
        messageType:
          type: string
          description: The logging level for the attached message
          example: INFO
          enum:
          - DEBUG
          - ERROR
          - WARNING
          - INFO
      description: An array of status messages to convey technical logging information from the server to the client.
    ImageCollectionDeleteResponse:
      title: ImageCollectionDeleteResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImageCollectionDeleteResponse_result'
    ImageDeleteResponse:
      title: ImageDeleteResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImageDeleteResponse_result'
    ImagingEventDeleteResponse:
      title: ImagingEventDeleteResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImagingEventDeleteResponse_result'
    inline_response_200:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/inline_response_200_data'
          description: An object with keys that are drone run database ids and values that are objects for the number of saved images for the various types of images.
    ImageCollectionListResponse:
      title: ImageCollectionListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImageCollectionListResponse_result'
    ImageCollectionSingleResponse:
      title: ImageCollectionSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImageCollection'
    ImageMutationRunListResponse:
      title: ImageMutationRunListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImageMutationRunListResponse_result'
    ImageMutationListResponse:
      title: ImageMutationListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImageMutationListResponse_result'
    ImageListResponse:
      title: ImageListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImageListResponse_result'
    ImageSingleResponse:
      title: ImageSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/Image'
    ImagingEventListResponse:
      title: ImagingEventListResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImagingEventListResponse_result'
    ImagingEventSingleResponse:
      title: ImagingEventSingleResponse
      required:
      - metadata
      - result
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        metadata:
          $ref: '#/components/schemas/metadata'
        result:
          $ref: '#/components/schemas/ImagingEvent'
    ExternalReferences_inner:
      type: object
      properties:
        referenceID:
          type: string
          description: "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI."
          deprecated: true
        referenceId:
          type: string
          description: The external reference ID. Could be a simple string or a URI.
        referenceSource:
          type: string
          description: An identifier for the source system or database of this reference
    GeoJSON:
      title: GeoJSON
      type: object
      properties:
        geometry:
          title: GeoJSON Geometry
          type: object
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          discriminator:
            propertyName: type
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
          oneOf:
          - type: object
            properties:
              coordinates:
                minItems: 2
                type: array
                description: A single position
                example:
                - -76.506042
                - 42.417373
                - 123
                items:
                  type: number
              type:
                type: string
                description: The literal string "Point"
                example: Point
                default: Point
            description: |-
              Copied from RFC 7946 Section 3.1.1

              A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
              easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
          - type: object
            properties:
              coordinates:
                type: array
                description: An array of linear rings
                example:
                - - - -77.456654
                    - 42.241133
                    - 494
                  - - -75.414133
                    - 41.508282
                    - 571
                  - - -76.506042
                    - 42.417373
                    - 123
                  - - -77.456654
                    - 42.241133
                    - 346
                items:
                  minItems: 4
                  type: array
                  description: An array of at least four positions where the first equals the last
                  example:
                  - - -77.456654
                    - 42.241133
                    - 494
                  - - -75.414133
                    - 41.508282
                    - 571
                  - - -76.506042
                    - 42.417373
                    - 123
                  - - -77.456654
                    - 42.241133
                    - 346
                  items:
                    minItems: 2
                    type: array
                    description: A single position
                    example:
                    - -76.506042
                    - 42.417373
                    - 123
                    items:
                      type: number
              type:
                type: string
                description: The literal string "Polygon"
                example: Polygon
                default: Polygon
            description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
        type:
          type: string
          description: The literal string "Feature"
          example: Feature
          default: Feature
      description: |-
        One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.

        Copied from RFC 7946 Section 3.1.1

        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
    GeoJSONSearchArea:
      title: GeoJSONSearchArea
      type: object
      properties:
        geometry:
          title: GeoJSON Geometry
          type: object
          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.
          example:
            coordinates:
            - -76.506042
            - 42.417373
            - 123
            type: Point
          discriminator:
            propertyName: type
            mapping:
              Point: '#/components/schemas/pointGeometry'
              Polygon: '#/components/schemas/polygonGeometry'
          oneOf:
          - type: object
            properties:
              coordinates:
                minItems: 2
                type: array
                description: A single position
                example:
                - -76.506042
                - 42.417373
                - 123
                items:
                  type: number
              type:
                type: string
                description: The literal string "Point"
                example: Point
                default: Point
            description: |-
              Copied from RFC 7946 Section 3.1.1

              A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or
              easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
          - type: object
            properties:
              coordinates:
                type: array
                description: An array of linear rings
                example:
                - - - -77.456654
                    - 42.241133
                    - 494
                  - - -75.414133
                    - 41.508282
                    - 571
                  - - -76.506042
                    - 42.417373
                    - 123
                  - - -77.456654
                    - 42.241133
                    - 346
                items:
                  minItems: 4
                  type: array
                  description: An array of at least four positions where the first equals the last
                  example:
                  - - -77.456654
                    - 42.241133
                    - 494
                  - - -75.414133
                    - 41.508282
                    - 571
                  - - -76.506042
                    - 42.417373
                    - 123
                  - - -77.456654
                    - 42.241133
                    - 346
                  items:
                    minItems: 2
                    type: array
                    description: A single position
                    example:
                    - -76.506042
                    - 42.417373
                    - 123
                    items:
                      type: number
              type:
                type: string
                description: The literal string "Polygon"
                example: Polygon
                default: Polygon
            description: "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
        type:
          type: string
          description: The literal string "Feature"
          example: Feature
          default: Feature
      description: "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system."
      example: '{"geometry":{"coordinates":[[[-77.456654,42.241133],[-75.414133,41.508282],[-76.506042,42.417373],[-77.456654,42.241133]]],"type":"Polygon"},"type":"Feature"}'
    ImageMutation_imageMutationParameters:
      type: object
      properties:
        parameterName:
          type: string
          description: the human readable name of an image mutation parameter
          example: image_type
        parameterType:
          type: string
          description: the data type of an image mutation parameter (string, integer, boolean, etc)
          example: string
        required:
          type: boolean
          description: True if the parameter is required for the image mutation to run properly
          example: true
        valueOptions:
          type: array
          description: If the parameter will only accept certain values, list those values here.
          example:
          - threshold_background_removed_tgi_stitched_drone_imagery
          - threshold_background_removed_vari_stitched_drone_imagery
          - threshold_background_removed_ndvi_stitched_drone_imagery
          - threshold_background_removed_stitched_drone_imagery
          items:
            type: string
    ImageMutationRunRequest_imageMutationParameters:
      type: object
      properties:
        parameterName:
          type: string
          description: the human readable name of an image mutation parameter
          example: lower_threshold
        parameterValue:
          type: string
          description: the value of an image mutation parameter
          example: "20"
    ImageMutationRunResponse_mutatedImages:
      type: object
      properties:
        inputImageDbId:
          type: string
          description: The unique database identifier of the original image used as input
          example: 34a22db7
        outputImageDbId:
          type: string
          description: The unique database identifier of the new image produced from a mutation run
          example: 2db734a2
    metadata_pagination:
      required:
      - currentPage
      - pageSize
      type: object
      properties:
        currentPage:
          type: integer
          description: The index number for the returned page of data. This should always match the requested page number or the default page (0).
          example: 0
          default: 0
        pageSize:
          type: integer
          description: The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.
          example: 1000
          default: 1000
        totalCount:
          type: integer
          description: The total number of elements that are available on the server and match the requested query parameters.
          example: 10
        totalPages:
          type: integer
          description: "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)"
          example: 1
      description: "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero)."
    ImageCollectionDeleteResponse_result:
      required:
      - imageCollectionDbIds
      type: object
      properties:
        imageCollectionDbIds:
          type: array
          description: The unique ids of the ImageCollection records which have been successfully deleted
          example:
          - 6a4a59d8
          - 3ff067e0
          items:
            type: string
    ImageDeleteResponse_result:
      required:
      - imageDbIds
      type: object
      properties:
        imageDbIds:
          type: array
          description: The unique ids of the Image records which have been successfully deleted
          example:
          - 6a4a59d8
          - 3ff067e0
          items:
            type: string
    ImagingEventDeleteResponse_result:
      required:
      - imagingEventDbIds
      type: object
      properties:
        imagingEventDbIds:
          type: array
          description: The unique ids of the ImagingEvent records which have been successfully deleted
          example:
          - 6a4a59d8
          - 3ff067e0
          items:
            type: string
    inline_response_200_data:
      type: object
      properties:
        observation_unit_polygon_ndvi_imagery:
          type: integer
          example: 500
        observation_unit_polygon_tgi_imagery:
          type: integer
          example: 500
        total_plot_image_count:
          type: integer
          example: 1000
    ImageCollectionListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.
          items:
            $ref: '#/components/schemas/ImageCollection'
    ImageMutationRunListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ImageMutationRunResponse'
    ImageMutationListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ImageMutation'
    ImageListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.
          items:
            $ref: '#/components/schemas/Image'
    ImagingEventListResponse_result:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.
          items:
            $ref: '#/components/schemas/ImagingEvent'
  responses:
    "202AcceptedSearchResponse":
      description: Accepted
      content:
        application/json:
          schema:
            title: 202AcceptedSearchResponse
            type: object
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
              metadata:
                $ref: '#/components/schemas/metadata'
              result:
                type: object
                properties:
                  searchResultsDbId:
                    type: string
                    example: 551ae08c
    "400BadRequest":
      description: Bad Request
      content:
        application/json:
          schema:
            type: string
          example: |-
            ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object

            ERROR - 2018-10-08T18:15:11Z - Invalid query parameter

            ERROR - 2018-10-08T18:15:11Z - Required parameter is missing
    "401Unauthorized":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token
    "403Forbidden":
      description: Forbidden
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action
    "404NotFound":
      description: Not Found
      content:
        application/json:
          schema:
            type: string
          example: ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found
    ImageCollectionDeleteResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageCollectionDeleteResponse'
    ImageCollectionListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageCollectionListResponse'
    ImageCollectionSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageCollectionSingleResponse'
    ImageDeleteResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageDeleteResponse'
    ImageListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageListResponse'
    ImageMutationListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageMutationListResponse'
    ImageMutationRunListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageMutationRunListResponse'
    ImageSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageSingleResponse'
    ImagingEventDeleteResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImagingEventDeleteResponse'
    ImagingEventListResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImagingEventListResponse'
    ImagingEventSingleResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImagingEventSingleResponse'
  parameters:
    authorizationHeader:
      name: Authorization
      in: header
      description: "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>"
      required: false
      style: simple
      explode: false
      schema:
        pattern: ^Bearer .*$
        type: string
      example: Bearer XXXX
    commonCropName:
      name: commonCropName
      in: query
      description: "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server."
      required: false
      style: form
      explode: true
      schema:
        type: string
    externalReferenceID:
      name: externalReferenceID
      in: query
      description: "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)"
      required: false
      deprecated: true
      style: form
      explode: true
      schema:
        type: string
    externalReferenceId:
      name: externalReferenceId
      in: query
      description: An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    externalReferenceSource:
      name: externalReferenceSource
      in: query
      description: An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)
      required: false
      style: form
      explode: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: |-
        Used to request a specific page of data to be returned.

        The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: "0"
    pageSize:
      name: pageSize
      in: query
      description: The size of the pages to be returned. Default is `1000`.
      required: false
      style: form
      explode: true
      schema:
        type: integer
      example: 1000
    programDbId:
      name: programDbId
      in: query
      description: "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server."
      required: false
      style: form
      explode: true
      schema:
        type: string
    programName:
      name: programName
      in: query
      description: "Use this parameter to only return results associated with the given `Program` by its human readable name. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server."
      required: false
      style: form
      explode: true
      schema:
        type: string
    searchResultsDbId:
      name: searchResultsDbId
      in: path
      description: Unique identifier which references the search results
      required: true
      style: simple
      explode: false
      schema:
        type: string
    studyDbId:
      name: studyDbId
      in: query
      description: "Use this parameter to only return results associated with the given `Study` unique identifier. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server."
      required: false
      style: form
      explode: true
      schema:
        type: string
    studyName:
      name: studyName
      in: query
      description: "Use this parameter to only return results associated with the given `Study` by its human readable name. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server."
      required: false
      style: form
      explode: true
      schema:
        type: string
    trialDbId:
      name: trialDbId
      in: query
      description: "Use this parameter to only return results associated with the given `Trial` unique identifier. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server."
      required: false
      style: form
      explode: true
      schema:
        type: string
    trialName:
      name: trialName
      in: query
      description: "Use this parameter to only return results associated with the given `Trial` by its human readable name. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server."
      required: false
      style: form
      explode: true
      schema:
        type: string
  securitySchemes:
    AuthorizationToken:
      type: http
      description: OAuth Bearer Token - A valid Bearer token to prove authorization
      scheme: bearer
      bearerFormat: nonce token or JWT
