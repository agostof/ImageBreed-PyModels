# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-ImageBreed-0.1-resolved.yaml
#   timestamp: 2022-12-07T19:45:36+00:00

from __future__ import annotations

from typing import List, Optional

from fastapi import FastAPI, Query
from pydantic import constr

from .models import (
    AnalysisQueryResponse,
    AssignPlotPolygonsRequest,
    AssignPlotPolygonsResponse,
    CalculateFourierTransformRequest,
    CalculateFourierTransformResponse,
    CalculateVegetativeIndexRequest,
    CalculateVegetativeIndexResponse,
    CropImageResponse,
    DeleteDroneRunResponse,
    DenoiseResponse,
    GeneratePhenotypesRequest,
    GeneratePhenotypesResponse,
    GetContoursResponse,
    GetImageResponse,
    ImageCollectionDeleteResponse,
    ImageCollectionListResponse,
    ImageCollectionNewRequest,
    ImageCollectionSearchRequest,
    ImageCollectionSingleResponse,
    ImageDeleteResponse,
    ImageListResponse,
    ImageMutationListResponse,
    ImageMutationRunListResponse,
    ImageMutationRunRequest,
    ImageNewRequest,
    ImageSearchRequest,
    ImageSingleResponse,
    ImagingEventDeleteResponse,
    ImagingEventListResponse,
    ImagingEventNewRequest,
    ImagingEventSearchRequest,
    ImagingEventSingleResponse,
    InlineResponse200,
    MaskRemoveBackgroundResponse,
    MergeBandsResponse,
    RemoveBackgroundSaveRequest,
    RemoveBackgroundSaveResponse,
    RemoveImageResponse,
    RotateImageResponse,
    StandardProcessApplyResponse,
    UploadDroneImageryRequest,
    UploadDroneImageryResponse,
)

app = FastAPI(
    title='Imagebreed API',
    description='Imagebreed API',
    version='0.1',
)


@app.post('/delete/imageCollections', response_model=ImageCollectionDeleteResponse)
def post_delete_image_collections(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ImageCollectionSearchRequest = None,
) -> ImageCollectionDeleteResponse:
    """
    Submit a delete request for `ImageCollections`
    """
    pass


@app.post('/delete/images', response_model=ImageDeleteResponse)
def post_delete_images(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ImageSearchRequest = None,
) -> ImageDeleteResponse:
    """
    Submit a delete request for `Images`
    """
    pass


@app.post('/delete/imagingevents', response_model=ImagingEventDeleteResponse)
def post_delete_imagingevents(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ImagingEventSearchRequest = None,
) -> ImagingEventDeleteResponse:
    """
    Submit a delete request for `ImagingEvents`
    """
    pass


@app.get('/drone_imagery/analysis_query', response_model=AnalysisQueryResponse)
def get_drone_imagery_analysis_query(
    field_trial_id_list: str, drone_run_project_id_list: str, format: str = 'csv'
) -> AnalysisQueryResponse:
    """
    For retrieving all plot metadata, phenotype values, and image URLs in a tabular format.
    """
    pass


@app.post(
    '/drone_imagery/assign_plot_polygons', response_model=AssignPlotPolygonsResponse
)
def post_drone_imagery_assign_plot_polygons(
    body: AssignPlotPolygonsRequest = None,
) -> AssignPlotPolygonsResponse:
    """
    For assigning four-sided plot polygons onto a drone run image
    """
    pass


@app.post(
    '/drone_imagery/calculate_fourier_transform',
    response_model=CalculateFourierTransformResponse,
)
def post_drone_imagery_calculate_fourier_transform(
    body: CalculateFourierTransformRequest = None,
) -> CalculateFourierTransformResponse:
    """
    For calculating a vegetation index for an image.
    """
    pass


@app.post(
    '/drone_imagery/calculate_vegetative_index',
    response_model=CalculateVegetativeIndexResponse,
)
def post_drone_imagery_calculate_vegetative_index(
    body: CalculateVegetativeIndexRequest = None,
) -> CalculateVegetativeIndexResponse:
    """
    For calculating a vegetation index for an image.
    """
    pass


@app.get('/drone_imagery/crop_image', response_model=CropImageResponse)
def get_drone_imagery_crop_image(
    image_id: int, drone_run_band_project_id: int, polygon: str
) -> CropImageResponse:
    """
    For cropping an image to a four-sided polygon
    """
    pass


@app.get('/drone_imagery/delete_drone_run', response_model=DeleteDroneRunResponse)
def get_drone_imagery_delete_drone_run(
    drone_run_project_id: int,
) -> DeleteDroneRunResponse:
    """
    To permanently delete a drone run
    """
    pass


@app.get('/drone_imagery/denoise', response_model=DenoiseResponse)
def get_drone_imagery_denoise(
    image_id: int, drone_run_band_project_id: int
) -> DenoiseResponse:
    """
    For denoising an image.
    """
    pass


@app.post(
    '/drone_imagery/generate_phenotypes', response_model=GeneratePhenotypesResponse
)
def post_drone_imagery_generate_phenotypes(
    body: GeneratePhenotypesRequest = None,
) -> GeneratePhenotypesResponse:
    """
    For generating phenotypes for all plot images created from the standard process.
    """
    pass


@app.get('/drone_imagery/get_contours', response_model=GetContoursResponse)
def get_drone_imagery_get_contours(
    image_id: int, drone_run_band_project_id: int
) -> GetContoursResponse:
    """
    For getting the contours of an image.
    """
    pass


@app.get('/drone_imagery/get_image', response_model=GetImageResponse)
def get_drone_imagery_get_image(
    image_id: int, size: str = 'original'
) -> GetImageResponse:
    """
    For retrieving and downloading an image from the database
    """
    pass


@app.get(
    '/drone_imagery/mask_remove_background', response_model=MaskRemoveBackgroundResponse
)
def get_drone_imagery_mask_remove_background(
    image_id: int, drone_run_band_project_id: int, mask_image_id: int, mask_type: str
) -> MaskRemoveBackgroundResponse:
    """
    For removing the background from an image using a mask.
    """
    pass


@app.get('/drone_imagery/merge_bands', response_model=MergeBandsResponse)
def get_drone_imagery_merge_bands(
    drone_run_project_id: int,
    drone_run_project_name: int,
    band_1_drone_run_band_project_id: int,
    band_2_drone_run_band_project_id: int,
    band_3_drone_run_band_project_id: int,
) -> MergeBandsResponse:
    """
    For merging three separate drone run bands into a single image
    """
    pass


@app.get(
    '/drone_imagery/raw_drone_imagery_plot_image_count',
    response_model=InlineResponse200,
)
def get_drone_imagery_raw_drone_imagery_plot_image_count() -> InlineResponse200:
    """
    For summarizing the number of plot images saved in the database for a drone run.
    """
    pass


@app.post(
    '/drone_imagery/remove_background_save', response_model=RemoveBackgroundSaveResponse
)
def post_drone_imagery_remove_background_save(
    body: RemoveBackgroundSaveRequest = None,
) -> RemoveBackgroundSaveResponse:
    """
    For removing the background using an upper and lower threshold
    """
    pass


@app.get('/drone_imagery/remove_image', response_model=RemoveImageResponse)
def get_drone_imagery_remove_image(image_id: int) -> RemoveImageResponse:
    """
    For deleting an image from the database
    """
    pass


@app.get('/drone_imagery/rotate_image', response_model=RotateImageResponse)
def get_drone_imagery_rotate_image(
    image_id: int, drone_run_band_project_id: int, angle: str, view_only: bool
) -> RotateImageResponse:
    """
    For rotating an image clockwise or counter-clockwise.
    """
    pass


@app.get(
    '/drone_imagery/standard_process_apply', response_model=StandardProcessApplyResponse
)
def get_drone_imagery_standard_process_apply(
    drone_run_band_project_id: int,
    apply_drone_run_band_project_ids: str,
    drone_run_project_id: int,
    vegetative_indices: str,
) -> StandardProcessApplyResponse:
    """
    For applying a standard process to all uploaded drone run bands
    """
    pass


@app.post(
    '/drone_imagery/upload_drone_imagery', response_model=UploadDroneImageryResponse
)
def post_drone_imagery_upload_drone_imagery(
    body: UploadDroneImageryRequest = None,
) -> UploadDroneImageryResponse:
    """
    For uploading drone images into the database
    """
    pass


@app.get('/imageCollections', response_model=ImageCollectionListResponse)
def get_image_collections(
    image_collection_db_id: Optional[str] = Query(None, alias='imageCollectionDbId'),
    image_collection_name: Optional[str] = Query(None, alias='imageCollectionName'),
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    observation_db_id: Optional[str] = Query(None, alias='observationDbId'),
    descriptive_ontology_term: Optional[str] = Query(
        None, alias='descriptiveOntologyTerm'
    ),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImageCollectionListResponse:
    """
    Get the imageCollection metadata summaries
    """
    pass


@app.post('/imageCollections', response_model=ImageCollectionListResponse)
def post_image_collections(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[ImageCollectionNewRequest] = None,
) -> ImageCollectionListResponse:
    """
    Create new imageCollection metadata records
    """
    pass


@app.put(
    '/imageCollections/{image_collection_db_id}/imagecontent',
    response_model=ImageCollectionSingleResponse,
)
def put_image_collections_image_collection_db_id_imagecontent(
    image_collection_db_id: str = Query(..., alias='imageCollectionDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImageCollectionSingleResponse:
    """
    Attach an imageCollection binary file to an existing imageCollection metadata record
    """
    pass


@app.get(
    '/imagecollections/{image_collection_db_id}',
    response_model=ImageCollectionSingleResponse,
)
def get_imagecollections_image_collection_db_id(
    image_collection_db_id: str = Query(..., alias='imageCollectionDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImageCollectionSingleResponse:
    """
    Get the an imageCollection metadata summary
    """
    pass


@app.put(
    '/imagecollections/{image_collection_db_id}',
    response_model=ImageCollectionSingleResponse,
)
def put_imagecollections_image_collection_db_id(
    image_collection_db_id: str = Query(..., alias='imageCollectionDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ImageCollectionNewRequest = None,
) -> ImageCollectionSingleResponse:
    """
    Update an existing imageCollection metadata record
    """
    pass


@app.post('/imagemutationruns', response_model=ImageMutationRunListResponse)
def post_imagemutationruns(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ImageMutationRunRequest = None,
) -> ImageMutationRunListResponse:
    """
    Get filtered set of image mutations
    """
    pass


@app.get('/imagemutations', response_model=ImageMutationListResponse)
def get_imagemutations(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImageMutationListResponse:
    """
    Get filtered set of image mutations
    """
    pass


@app.get('/images', response_model=ImageListResponse)
def get_images(
    image_db_id: Optional[str] = Query(None, alias='imageDbId'),
    image_name: Optional[str] = Query(None, alias='imageName'),
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    observation_db_id: Optional[str] = Query(None, alias='observationDbId'),
    descriptive_ontology_term: Optional[str] = Query(
        None, alias='descriptiveOntologyTerm'
    ),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImageListResponse:
    """
    Get the image metadata summaries
    """
    pass


@app.post('/images', response_model=ImageListResponse)
def post_images(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[ImageNewRequest] = None,
) -> ImageListResponse:
    """
    Create new image metadata records
    """
    pass


@app.get('/images/{image_db_id}', response_model=ImageSingleResponse)
def get_images_image_db_id(
    image_db_id: str = Query(..., alias='imageDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImageSingleResponse:
    """
    Get the an image metadata summary
    """
    pass


@app.put('/images/{image_db_id}', response_model=ImageSingleResponse)
def put_images_image_db_id(
    image_db_id: str = Query(..., alias='imageDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ImageNewRequest = None,
) -> ImageSingleResponse:
    """
    Update an existing image metadata record
    """
    pass


@app.put('/images/{image_db_id}/imagecontent', response_model=ImageSingleResponse)
def put_images_image_db_id_imagecontent(
    image_db_id: str = Query(..., alias='imageDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImageSingleResponse:
    """
    Attach an image binary file to an existing image metadata record
    """
    pass


@app.get('/imagingevents', response_model=ImagingEventListResponse)
def get_imagingevents(
    imaging_event_db_id: Optional[str] = Query(None, alias='imagingEventDbId'),
    imaging_event_name: Optional[str] = Query(None, alias='imagingEventName'),
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    observation_db_id: Optional[str] = Query(None, alias='observationDbId'),
    descriptive_ontology_term: Optional[str] = Query(
        None, alias='descriptiveOntologyTerm'
    ),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImagingEventListResponse:
    """
    Get the imagingEvent metadata summaries
    """
    pass


@app.post('/imagingevents', response_model=ImagingEventListResponse)
def post_imagingevents(
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: List[ImagingEventNewRequest] = None,
) -> ImagingEventListResponse:
    """
    Create new imagingEvent metadata records
    """
    pass


@app.get(
    '/imagingevents/{imaging_event_db_id}', response_model=ImagingEventSingleResponse
)
def get_imagingevents_imaging_event_db_id(
    imaging_event_db_id: str = Query(..., alias='imagingEventDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
) -> ImagingEventSingleResponse:
    """
    Get the an imagingEvent metadata summary
    """
    pass


@app.put(
    '/imagingevents/{imaging_event_db_id}', response_model=ImagingEventSingleResponse
)
def put_imagingevents_imaging_event_db_id(
    imaging_event_db_id: str = Query(..., alias='imagingEventDbId'),
    authorization: Optional[constr(regex='^Bearer .*$')] = Query(
        None, alias='Authorization'
    ),
    body: ImagingEventNewRequest = None,
) -> ImagingEventSingleResponse:
    """
    Update an existing imagingEvent metadata record
    """
    pass
