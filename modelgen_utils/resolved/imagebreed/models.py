# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-ImageBreed-0.1-resolved.yaml
#   timestamp: 2022-12-07T19:45:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field, conint, constr


class AnalysisQueryResponse(BaseModel):
    file: str = Field(
        ...,
        description='A URL download for the response file.',
        example='https://imagebreed.org/dl/file1',
    )


class StockPolygon(BaseModel):
    x: Optional[int] = None
    y: Optional[int] = None


class StockPolygons(BaseModel):
    __root__: List[StockPolygon]


class AssignPlotPolygonsRequest(BaseModel):
    assign_plot_polygons_type: Optional[str] = Field(
        None,
        description='The type of plot polygons being created and assigned.',
        example='â€˜observation_unit_polygon_nir_imageryâ€™',
    )
    drone_run_band_project_id: Optional[int] = Field(
        None,
        description='The database drone run band identifier for which the plot polygons belongs to.',
        example=203,
    )
    image_id: Optional[int] = Field(
        None,
        description='The database image identifier for the image you want to assign plot polygons to.',
        example=1900,
    )
    stock_polygons: Optional[Dict[str, StockPolygons]] = Field(
        None,
        description='The keys of the object are the plot names and the values are an array of length 4 containing objects denoting the x and y coordinates of the polygon. All plots in the field trial should be included. All polygons should have 4 bounding points.',
        example={
            '2018_NYH2_plot_1': [
                {'x': 100, 'y': 100},
                {'x': 120, 'y': 100},
                {'x': 120, 'y': 80},
                {'x': 100, 'y': 80},
            ],
            '2018_NYH2_plot_2': [
                {'x': 200, 'y': 100},
                {'x': 220, 'y': 100},
                {'x': 220, 'y': 80},
                {'x': 200, 'y': 80},
            ],
        },
    )


class AssignPlotPolygonsResponse(BaseModel):
    error: Optional[str] = Field(
        None,
        description='A message describing any errors encountered.',
        example='Error Polygon for 2018_NYH2_plot_200 should be 4 long.',
    )
    success: Optional[str] = Field(
        None,
        description='A message describing whether the assigned plot polygon images were saved in the database.',
        example='All plot polygon images were saved successfully.',
    )


class DroneRunBandProjectType(Enum):
    Black_and_White_Image = 'Black and White Image'
    RGB_Color_Image = 'RGB Color Image'
    Blue__450_520nm_ = 'Blue (450-520nm)'
    Green__515_600nm_ = 'Green (515-600nm)'
    Red__600_690nm_ = 'Red (600-690nm)'
    Red_Edge__690_750nm_ = 'Red Edge (690-750nm)'
    NIR__780_3000nm_ = 'NIR (780-3000nm)'
    MIR__3000_50000nm_ = 'MIR (3000-50000nm)'
    FIR__50000_1000000nm_ = 'FIR (50000-1000000nm)'
    Thermal_IR__9000_14000nm_ = 'Thermal IR (9000-14000nm)'


class HighPassFilter(Enum):
    integer_20 = 20
    integer_30 = 30
    integer_40 = 40


class HighPassFilterType(Enum):
    frequency = 'frequency'
    magnitude = 'magnitude'


class CalculateFourierTransformRequest(BaseModel):
    drone_run_band_project_id: Optional[int] = Field(
        None,
        description='The database identifier for the drone run band that the transformed image belongs to.',
        example=1002,
    )
    drone_run_band_project_type: Optional[DroneRunBandProjectType] = Field(
        None,
        description='The spectral category of the drone run band.',
        example='NIR (780-3000nm)',
    )
    high_pass_filter: Optional[HighPassFilter] = Field(
        None, description='The high pass filter to apply.', example=20
    )
    high_pass_filter_type: Optional[HighPassFilterType] = Field(
        None,
        description='The criteria of Fourier transform high-pass filter to perform.',
        example='frequency',
    )
    image_id: Optional[int] = Field(
        None,
        description='The database identifier for the image to calculate Fourier transform for.',
        example=10,
    )
    image_type: Optional[str] = Field(
        None,
        description='The type of image for which to calculate the Fourier transform on.',
        example='denoised_stitched_drone_imagery',
    )


class CalculateFourierTransformResponse(BaseModel):
    ft_image_fullpath: Optional[str] = Field(
        None,
        description='File path for Fourier transformed image on the server.',
        example='/export/images/image707',
    )
    ft_image_id: Optional[int] = Field(
        None,
        description='The database identifier for the Fourier transformed image.',
        example=707,
    )
    ft_image_url: Optional[str] = Field(
        None,
        description='URL for downloading the Fourier transformed image..',
        example='https://imagebreed.org/dl/image/707',
    )


class ImageType(Enum):
    BGR = 'BGR'
    NRN = 'NRN'
    NReN = 'NReN'


class VegetativeIndex(Enum):
    TGI = 'TGI'
    VARI = 'VARI'
    NDVI = 'NDVI'


class CalculateVegetativeIndexRequest(BaseModel):
    drone_run_band_project_id: Optional[int] = Field(
        None,
        description='The database identifier for the drone run band that the vegetation index belongs to.',
        example=1002,
    )
    image_id: Optional[int] = Field(
        None,
        description='The database identifier for the image to calculate a vegetation index for.',
        example=10,
    )
    image_type: Optional[ImageType] = Field(
        None,
        description='The type of image for which to calculate the vegetation index on.',
        example='NRN',
    )
    vegetative_index: Optional[VegetativeIndex] = Field(
        None, description='The type of vegetation index to calculate.', example='NDVI'
    )


class CalculateVegetativeIndexResponse(BaseModel):
    index_image_fullpath: Optional[str] = Field(
        None,
        description='File path for index image on the server.',
        example='/export/images/image707',
    )
    index_image_id: Optional[int] = Field(
        None,
        description='The database identifier for the vegetation index image.',
        example=707,
    )
    index_image_url: Optional[str] = Field(
        None,
        description='URL for downloading the index image.',
        example='https://imagebreed.org/dl/image/707',
    )


class Context(BaseModel):
    __root__: List[AnyUrl] = Field(
        ...,
        description='The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context',
        example=['https://brapi.org/jsonld/context/metadata.jsonld'],
        title='context',
    )


class CropImageResponse(BaseModel):
    cropped_image_fullpath: str = Field(
        ...,
        description='File path for cropped image on the server.',
        example='/export/images/image705',
    )
    cropped_image_id: int = Field(
        ..., description='The database identifier for the cropped image.', example=705
    )
    cropped_image_url: str = Field(
        ...,
        description='URL for downloading the cropped image.',
        example='https://imagebreed.org/dl/image/705',
    )


class DeleteDroneRunResponse(BaseModel):
    error: str = Field(
        ...,
        description='Status message indicating errors.',
        example='Must be logged in.',
    )
    success: str = Field(
        ...,
        description='Status message indicating completion.',
        example='Image deleted successfully.',
    )


class DenoiseResponse(BaseModel):
    denoised_image_fullpath: Optional[str] = Field(
        None,
        description='File path for denoised image on the server.',
        example='/export/images/image703',
    )
    denoised_image_id: Optional[int] = Field(
        None, description='The database identifier for the denoised image.', example=703
    )
    denoised_image_url: Optional[str] = Field(
        None,
        description='URL for downloading the denoised image.',
        example='https://imagebreed.org/dl/image/703',
    )


class PhenotypeType(Enum):
    zonal = 'zonal'


class GeneratePhenotypesRequest(BaseModel):
    drone_run_project_id: int = Field(
        ...,
        description='The database identifier for the drone run to calculate phenotypes for.',
        example=101,
    )
    phenotype_types: Optional[List[PhenotypeType]] = Field(
        None,
        description='An array indicating the type of phenotypes to generate.',
        example=['zonal'],
    )
    time_cvterm_id: Optional[int] = Field(
        None,
        description='The database identifier for the relative time point of the drone run. e.g. there is a database term for "week 10" or "month 2". This time term is used to annotate the generated phenotype values.',
        example=3022,
    )


class GeneratePhenotypesResponse(BaseModel):
    error: Optional[str] = Field(
        None,
        description='A message indicating any errors.',
        example='Must be logged in.',
    )
    success: Optional[str] = Field(
        None,
        description='A message indicating if the phenotypes were saved successfully.',
        example='The plot image phenotypes were saved successfully.',
    )


class GetContoursResponse(BaseModel):
    contours_image_fullpath: str = Field(
        ...,
        description='File path for contours image on the server.',
        example='â€˜/export/images/image702â€™',
    )
    contours_image_id: int = Field(
        ...,
        description='The database identifier for the generated contours image.',
        example=702,
    )
    contours_image_url: str = Field(
        ...,
        description='URL for downloading the generated contours image.',
        example='â€˜https://imagebreed.org/dl/image/702â€™',
    )


class GetImageResponse(BaseModel):
    image_fullpath: str = Field(
        ...,
        description='File path for image on the server.',
        example='/export/images/image704',
    )
    image_url: str = Field(
        ...,
        description='URL for downloading the image.',
        example='https://imagebreed.org/dl/image/19',
    )


class AdditionalInfo(BaseModel):
    class Config:
        extra = Extra.allow

    __root__: str


class MimeType(BaseModel):
    __root__: constr(regex='imageCollection/.*')


class ImageInputTypeEnum(Enum):
    IMAGE_SINGLE = 'IMAGE_SINGLE'
    IMAGE_LIST = 'IMAGE_LIST'
    IMAGE_COLLECTION_SINGLE = 'IMAGE_COLLECTION_SINGLE'
    IMAGE_COLLECTION_LIST = 'IMAGE_COLLECTION_LIST'


class MimeType1(BaseModel):
    __root__: constr(regex='image/.*')


class ImagingEventSearchRequest(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    imagingEventDbIds: Optional[List[str]] = Field(
        None,
        description='A list of imagingEvent Ids to search for',
        example=['564b64a6', '0d122d1d'],
    )
    imagingEventNames: Optional[List[str]] = Field(
        None,
        description='Human readable names to search for.',
        example=['ImagingEvent 43', 'Tractor in field'],
    )
    imagingEventTimeStampRangeEnd: Optional[datetime] = Field(
        None, description='The latest timestamp to search for.'
    )
    imagingEventTimeStampRangeStart: Optional[datetime] = Field(
        None, description='The earliest timestamp to search for.'
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )


class MaskRemoveBackgroundResponse(BaseModel):
    masked_image_fullpath: str = Field(
        ...,
        description='File path for background removed image on the server.',
        example='/export/images/image706',
    )
    masked_image_id: int = Field(
        ...,
        description='The database identifier for the background removed image.',
        example=706,
    )
    masked_image_url: str = Field(
        ...,
        description='URL for downloading the background removed image.',
        example='https://imagebreed.org/dl/image/706',
    )


class MergeBandsResponse(BaseModel):
    merged_image_fullpath: str = Field(
        ...,
        description='File path for merged image on the server.',
        example='/export/images/image707',
    )
    merged_image_id: int = Field(
        ...,
        description='The database identifier for the merged removed image.',
        example=707,
    )
    merged_image_url: str = Field(
        ...,
        description='URL for downloading the merged image.',
        example='https://imagebreed.org/dl/image/707',
    )


class ImageType1(Enum):
    threshold_background_removed_tgi_stitched_drone_imagery = (
        'threshold_background_removed_tgi_stitched_drone_imagery'
    )
    threshold_background_removed_vari_stitched_drone_imagery = (
        'threshold_background_removed_vari_stitched_drone_imagery'
    )
    threshold_background_removed_ndvi_stitched_drone_imagery = (
        'threshold_background_removed_ndvi_stitched_drone_imagery'
    )
    threshold_background_removed_stitched_drone_imagery = (
        'threshold_background_removed_stitched_drone_imagery'
    )


class RemoveBackgroundSaveRequest(BaseModel):
    drone_run_band_project_id: Optional[int] = Field(
        None,
        description='The database drone run band identifier for which the background removed image belongs to.',
        example=203,
    )
    image_id: Optional[int] = Field(
        None,
        description='The database image identifier for the image to remove the background from.',
        example=1900,
    )
    image_type: Optional[ImageType1] = Field(
        None,
        description='The type of the background removed image that is generated.',
        example='threshold_background_removed_stitched_drone_imagery',
    )
    lower_threshold: Optional[conint(ge=0, le=255)] = Field(
        None,
        description='Threshold value for which to remove pixels with a lower pixel value. Range is 0 to 255.',
        example=20,
    )
    upper_threshold: Optional[conint(ge=0, le=255)] = Field(
        None,
        description='Threshold value for which to remove pixels with a higher pixel value. Range is 0 to 255.',
        example=220,
    )


class RemoveBackgroundSaveResponse(BaseModel):
    removed_background_image_fullpath: Optional[str] = Field(
        None,
        description='File path for removed background image on the server.',
        example='/export/images/image704',
    )
    removed_background_image_id: Optional[int] = Field(
        None,
        description='The database identifier for the background removed image.',
        example=704,
    )
    removed_background_image_url: Optional[str] = Field(
        None,
        description='URL for downloading the background removed image.',
        example='https://imagebreed.org/dl/image/704',
    )


class RemoveImageResponse(BaseModel):
    status: str = Field(
        ...,
        description='Status message indicating any error handling.',
        example='Image deleted successfully.',
    )


class RotateImageResponse(BaseModel):
    rotated_image_fullpath: str = Field(
        ...,
        description='File path for rotated image on the server.',
        example='â€˜/export/images/image701â€™',
    )
    rotated_image_id: int = Field(
        ..., description='The database identifier for the rotated image.', example=701
    )
    rotated_image_url: str = Field(
        ...,
        description='URL for downloading the rotated image.',
        example='â€˜https://imagebreed.org/dl/image/701â€™',
    )


class SearchRequestParametersCommonCropNames(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )


class SearchRequestParametersExternalReferences(BaseModel):
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )


class SearchRequestParametersGermplasm(BaseModel):
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )


class SearchRequestParametersLocations(BaseModel):
    locationDbIds: Optional[List[str]] = Field(
        None,
        description='The location ids to search for',
        example=['b28911cf', '5071d1e4'],
    )
    locationNames: Optional[List[str]] = Field(
        None,
        description='A human readable names to search for',
        example=['Location Alpha', 'The Large Hadron Collider'],
    )


class SearchRequestParametersPaging(BaseModel):
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )


class SearchRequestParametersPrograms(BaseModel):
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )


class SearchRequestParametersStudies(BaseModel):
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )


class SearchRequestParametersTrials(BaseModel):
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class StandardProcessApplyResponse(BaseModel):
    error: str = Field(
        ...,
        description='A message indicating any errors in the standard process.',
        example='Please give a drone run band project id with a standard process defined.',
    )
    success: str = Field(
        ...,
        description='A message indicating if the standard process was applied successfully.',
        example='The standard process was applied successfully.',
    )


class DroneImageUploadCameraInfo(Enum):
    micasense_5 = 'micasense_5'
    ccd_color = 'ccd_color'
    cmos_color = 'cmos_color'


class DroneImageUploadDroneRunBandStitching(Enum):
    yes = 'yes'
    no = 'no'


class DroneRunBandType1(Enum):
    Black_and_White_Image = 'Black and White Image'
    RGB_Color_Image = 'RGB Color Image'
    Blue__450_520nm_ = 'Blue (450-520nm)'
    Green__515_600nm_ = 'Green (515-600nm)'
    Red__600_690nm_ = 'Red (600-690nm)'
    Red_Edge__690_750nm_ = 'Red Edge (690-750nm)'
    NIR__780_3000nm_ = 'NIR (780-3000nm)'
    MIR__3000_50000nm_ = 'MIR (3000-50000nm)'
    FIR__50000_1000000nm_ = 'FIR (50000-1000000nm)'
    Thermal_IR__9000_14000nm_ = 'Thermal IR (9000-14000nm)'


class DroneRunType(Enum):
    Aerial_Medium_to_High_Res = 'Aerial Medium to High Res'
    Aerial_Low_Res = 'Aerial Low Res'


class UploadDroneImageryRequest(BaseModel):
    drone_image_upload_camera_info: Optional[DroneImageUploadCameraInfo] = Field(
        None,
        description='The type of camera used in the drone run. Mainly to distinguish between the Micasense Rededge 5 band camera and color cameras. In the case where the drone run already exists in the database, this key can be left undefined.',
        example='micasense_5',
    )
    drone_image_upload_drone_run_band_stitching: Optional[
        DroneImageUploadDroneRunBandStitching
    ] = Field(
        None,
        description="Whether the user intends to upload raw-image captures or previously stitched orthophotomosaic raster images. When uploading raw image captures with the intention of stitching into an orthophotomosaic, use 'yes'. In the case where the drone run already exists in the database, this key can be left undefined.",
        example='no',
    )
    drone_run_band_description_1: Optional[str] = Field(
        None,
        description='A description for the drone run band being uploaded to the drone run of the field trial. Multiple bands can be uploaded using the key index, e.g. 1 to 5. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.',
        example='Red band from Micasense Red Edge Camera processed in Pix4',
    )
    drone_run_band_name_1: Optional[str] = Field(
        None,
        description='A name for the drone run band being uploaded to the drone run of the field trial. Multiple bands can be uploaded using the key index, e.g. 1 to 5. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.',
        example='07012018_NYH2_Red',
    )
    drone_run_band_number: Optional[int] = Field(
        None,
        description="The number of separate image bands to be uploaded e.g. 5 when using the Micasense Rededge 5 band camera. This is used when uploading previously stitched orthophotomosaic raster images e.g. drone_image_upload_drone_run_band_stitching should be 'no'. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.",
        example=5,
    )
    drone_run_band_stitched_ortho_image_1: Optional[str] = Field(
        None,
        description='Multiple bands can be uploaded using the key index, e.g. 1 to 5. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.',
        example="Uploadfile('/upload/red_orthophotomosaic.png')",
    )
    drone_run_band_type_1: Optional[DroneRunBandType1] = Field(
        None,
        description='A type for the drone run band being uploaded to the drone run of the field trial. Multiple bands can be uploaded using the key index, e.g. 1 to 5. In the case where raw-image captures were uploaded to be stitched, this key can be left undefined.',
        example='Red (600-690nm)',
    )
    drone_run_date: Optional[datetime] = Field(
        None,
        description='The date that the new drone run was flown. In the case where the drone run already exists in the database, this key can be left undefined.',
    )
    drone_run_description: Optional[str] = Field(
        None,
        description='A description for the new drone run. In the case where the drone run already exists in the database, this key can be left undefined.',
        example='The flight captured the NYH2 field at 1:00pm at an altitude of 20m and a speed of 5km/hr',
    )
    drone_run_field_trial_id: int = Field(
        ...,
        description='The database identifier for the field trial. The field trial represents the experimental design layout and metadata.',
        example=1202,
    )
    drone_run_id: Optional[int] = Field(
        None,
        description='The database identifier for the drone run. This key is used when a drone run already exists in the database and additional drone images are being added to it. In the case where the drone run is new, this key can be left undefined.',
        example=102,
    )
    drone_run_name: Optional[str] = Field(
        None,
        description='The globally unique name for the new drone run for which drone images are being uploaded. In the case where the drone run already exists in the database, this key can be left undefined.',
        example='07012018_NYH2',
    )
    drone_run_type: Optional[DroneRunType] = Field(
        None,
        description='The type for the new drone run. In the case where the drone run already exists in the database, this key can be left undefined.',
        example='Aerial Medium to High Res',
    )
    upload_drone_images_panel_zipfile: Optional[str] = Field(
        None,
        description='In the case where raw-image captures are being uploaded into ImageBreed for stitching into an orthophotomosaic raster image e.g. drone_image_upload_drone_run_band_stitching is ï¿½yesï¿½, this input is used to upload the Micasense calibration panel captures in a compressed (.zip) file. ImageBreed uses the panel to calibrate the raw-image captures provided via upload_drone_images_zipfile in the case where the images were from the Micasense Rededge 5 band camera. If a Micasense camera was not used, this input can be left undefined.',
        example="Uploadfile('/upload/raw_micasense_5_band_panel_captures.zip')",
    )
    upload_drone_images_zipfile: Optional[str] = Field(
        None,
        description='In the case where raw-image captures are being uploaded into ImageBreed for stitching into an orthophotomosaic raster image e.g. drone_image_upload_drone_run_band_stitching is ï¿½yesï¿½, this input is used to upload a compressed (.zip) file with all raw images. The maximum upload size is 3GB.',
        example="Uploadfile('/upload/raw_micasense_5_band_captures.zip')",
    )


class UploadDroneImageryResponse(BaseModel):
    drone_run_band_image_ids: Optional[List[int]] = Field(
        None,
        description='Database identifiers for the new orthophotomosaic image(s) saved to each new drone run band project, one to one.',
        example=[8001, 8002, 8003, 8004, 8005],
    )
    drone_run_band_image_urls: Optional[List[str]] = Field(
        None,
        description='Database web URLs for the new orthophotomisaic image(s) saved to each new drone run band project, one to one.',
        example=[
            'https://imagebreed.org/image/blue.png',
            'https://imagebreed.org/image/green.png',
            'https://imagebreed.org/image/red.png',
            'https://imagebreed.org/image/nir.png',
            'https://imagebreed.org/image/rededge.png',
        ],
    )
    drone_run_band_project_ids: Optional[List[int]] = Field(
        None,
        description='Database identifiers for the new drone run band project(s) which were saved.',
        example=[2001, 2002, 2003, 2004, 2005],
    )
    drone_run_project_id: int = Field(
        ...,
        description='The drone run project under which the new drone run band projects were created and in which the orthophotomosaic images were saved.',
        example=100,
    )
    error: Optional[str] = Field(
        None,
        description='A message describing any errors encountered during upload of drone images.',
        example='Please give a new drone run band name.',
    )
    success: Optional[str] = Field(
        None,
        description='A message describing whether the drone images were uploaded into the database.',
        example='The upload completed successfully.',
    )


class DataFile(BaseModel):
    fileDescription: Optional[str] = Field(
        None,
        description='A human readable description of the file contents',
        example='This is an Excel data file',
    )
    fileMD5Hash: Optional[str] = Field(
        None,
        description='The MD5 Hash of the file contents to be used as a check sum',
        example='c2365e900c81a89cf74d83dab60df146',
    )
    fileName: Optional[str] = Field(
        None, description='The name of the file', example='datafile.xlsx'
    )
    fileSize: Optional[int] = Field(
        None, description='The size of the file in bytes', example=4398
    )
    fileType: Optional[str] = Field(
        None,
        description='The type or format of the file. Preferably MIME Type.',
        example='application/vnd.ms-excel',
    )
    fileURL: AnyUrl = Field(
        ...,
        description='The absolute URL where the file is located',
        example='https://wiki.brapi.org/examples/datafile.xlsx',
    )


class GeometryItem(BaseModel):
    coordinates: Optional[List[float]] = Field(
        None,
        description='A single position',
        example=[-76.506042, 42.417373, 123],
        min_items=2,
    )
    type: Optional[str] = Field(
        'Point', description='The literal string "Point"', example='Point'
    )


class Coordinate(BaseModel):
    __root__: List[Any] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
    )


class GeometryItem1(BaseModel):
    coordinates: Optional[List[Coordinate]] = Field(
        None,
        description='An array of linear rings',
        example=[
            [
                [-77.456654, 42.241133, 494],
                [-75.414133, 41.508282, 571],
                [-76.506042, 42.417373, 123],
                [-77.456654, 42.241133, 346],
            ]
        ],
    )
    type: Optional[str] = Field(
        'Polygon', description='The literal string "Polygon"', example='Polygon'
    )


class GeoJSON(BaseModel):
    geometry: Optional[Union[GeometryItem4, GeometryItem5]] = Field(
        None,
        description='A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.',
        example={'coordinates': [-76.506042, 42.417373, 123], 'type': 'Point'},
        title='GeoJSON Geometry',
    )
    type: Optional[str] = Field(
        'Feature', description='The literal string "Feature"', example='Feature'
    )


class GeometryItem2(BaseModel):
    coordinates: Optional[List[float]] = Field(
        None,
        description='A single position',
        example=[-76.506042, 42.417373, 123],
        min_items=2,
    )
    type: Optional[str] = Field(
        'Point', description='The literal string "Point"', example='Point'
    )


class Coordinate1(BaseModel):
    __root__: List[Any] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
    )


class GeometryItem3(BaseModel):
    coordinates: Optional[List[Coordinate1]] = Field(
        None,
        description='An array of linear rings',
        example=[
            [
                [-77.456654, 42.241133, 494],
                [-75.414133, 41.508282, 571],
                [-76.506042, 42.417373, 123],
                [-77.456654, 42.241133, 346],
            ]
        ],
    )
    type: Optional[str] = Field(
        'Polygon', description='The literal string "Polygon"', example='Polygon'
    )


class GeoJSONSearchArea(BaseModel):
    geometry: Optional[Union[GeometryItem6, GeometryItem7]] = Field(
        None,
        description='A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.',
        example={'coordinates': [-76.506042, 42.417373, 123], 'type': 'Point'},
        title='GeoJSON Geometry',
    )
    type: Optional[str] = Field(
        'Feature', description='The literal string "Feature"', example='Feature'
    )


class LinearRingItem(BaseModel):
    __root__: List[Any] = Field(
        ..., description='A single position', example=[-76.506042, 42.417373, 123]
    )


class LinearRing(BaseModel):
    __root__: List[LinearRingItem] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
        min_items=4,
    )


class PointGeometry(BaseModel):
    coordinates: Optional[List[float]] = Field(
        None,
        description='A single position',
        example=[-76.506042, 42.417373, 123],
        min_items=2,
    )
    type: Optional[str] = Field(
        'Point', description='The literal string "Point"', example='Point'
    )


class PolygonItem(BaseModel):
    __root__: List[Any] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
    )


class Polygon(BaseModel):
    __root__: List[PolygonItem] = Field(
        ...,
        description='An array of linear rings',
        example=[
            [
                [-77.456654, 42.241133, 494],
                [-75.414133, 41.508282, 571],
                [-76.506042, 42.417373, 123],
                [-77.456654, 42.241133, 346],
            ]
        ],
    )


class Coordinate2(BaseModel):
    __root__: List[Any] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
    )


class PolygonGeometry(BaseModel):
    coordinates: Optional[List[Coordinate2]] = Field(
        None,
        description='An array of linear rings',
        example=[
            [
                [-77.456654, 42.241133, 494],
                [-75.414133, 41.508282, 571],
                [-76.506042, 42.417373, 123],
                [-77.456654, 42.241133, 346],
            ]
        ],
    )
    type: Optional[str] = Field(
        'Polygon', description='The literal string "Polygon"', example='Polygon'
    )


class Position(BaseModel):
    __root__: List[float] = Field(
        ...,
        description='A single position',
        example=[-76.506042, 42.417373, 123],
        min_items=2,
    )


class MessageType(Enum):
    DEBUG = 'DEBUG'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'


class Status(BaseModel):
    message: str = Field(
        ...,
        description='A short message concerning the status of this request/response',
        example='Request accepted, response successful',
    )
    messageType: MessageType = Field(
        ..., description='The logging level for the attached message', example='INFO'
    )


class ExternalReferencesInner(BaseModel):
    referenceID: Optional[str] = Field(
        None,
        description='**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.',
    )
    referenceId: Optional[str] = Field(
        None,
        description='The external reference ID. Could be a simple string or a URI.',
    )
    referenceSource: Optional[str] = Field(
        None,
        description='An identifier for the source system or database of this reference',
    )


class GeometryItem4(BaseModel):
    coordinates: Optional[List[float]] = Field(
        None,
        description='A single position',
        example=[-76.506042, 42.417373, 123],
        min_items=2,
    )
    type: Optional[str] = Field(
        'Point', description='The literal string "Point"', example='Point'
    )


class Coordinate3(BaseModel):
    __root__: List[Any] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
    )


class GeometryItem5(BaseModel):
    coordinates: Optional[List[Coordinate3]] = Field(
        None,
        description='An array of linear rings',
        example=[
            [
                [-77.456654, 42.241133, 494],
                [-75.414133, 41.508282, 571],
                [-76.506042, 42.417373, 123],
                [-77.456654, 42.241133, 346],
            ]
        ],
    )
    type: Optional[str] = Field(
        'Polygon', description='The literal string "Polygon"', example='Polygon'
    )


class GeometryItem6(BaseModel):
    coordinates: Optional[List[float]] = Field(
        None,
        description='A single position',
        example=[-76.506042, 42.417373, 123],
        min_items=2,
    )
    type: Optional[str] = Field(
        'Point', description='The literal string "Point"', example='Point'
    )


class Coordinate4(BaseModel):
    __root__: List[Any] = Field(
        ...,
        description='An array of at least four positions where the first equals the last',
        example=[
            [-77.456654, 42.241133, 494],
            [-75.414133, 41.508282, 571],
            [-76.506042, 42.417373, 123],
            [-77.456654, 42.241133, 346],
        ],
    )


class GeometryItem7(BaseModel):
    coordinates: Optional[List[Coordinate4]] = Field(
        None,
        description='An array of linear rings',
        example=[
            [
                [-77.456654, 42.241133, 494],
                [-75.414133, 41.508282, 571],
                [-76.506042, 42.417373, 123],
                [-77.456654, 42.241133, 346],
            ]
        ],
    )
    type: Optional[str] = Field(
        'Polygon', description='The literal string "Polygon"', example='Polygon'
    )


class ImageMutationImageMutationParameters(BaseModel):
    parameterName: Optional[str] = Field(
        None,
        description='the human readable name of an image mutation parameter',
        example='image_type',
    )
    parameterType: Optional[str] = Field(
        None,
        description='the data type of an image mutation parameter (string, integer, boolean, etc)',
        example='string',
    )
    required: Optional[bool] = Field(
        None,
        description='True if the parameter is required for the image mutation to run properly',
        example=True,
    )
    valueOptions: Optional[List[str]] = Field(
        None,
        description='If the parameter will only accept certain values, list those values here.',
        example=[
            'threshold_background_removed_tgi_stitched_drone_imagery',
            'threshold_background_removed_vari_stitched_drone_imagery',
            'threshold_background_removed_ndvi_stitched_drone_imagery',
            'threshold_background_removed_stitched_drone_imagery',
        ],
    )


class ImageMutationRunRequestImageMutationParameters(BaseModel):
    parameterName: Optional[str] = Field(
        None,
        description='the human readable name of an image mutation parameter',
        example='lower_threshold',
    )
    parameterValue: Optional[str] = Field(
        None, description='the value of an image mutation parameter', example='20'
    )


class ImageMutationRunResponseMutatedImages(BaseModel):
    inputImageDbId: Optional[str] = Field(
        None,
        description='The unique database identifier of the original image used as input',
        example='34a22db7',
    )
    outputImageDbId: Optional[str] = Field(
        None,
        description='The unique database identifier of the new image produced from a mutation run',
        example='2db734a2',
    )


class MetadataPagination(BaseModel):
    currentPage: int = Field(
        ...,
        description='The index number for the returned page of data. This should always match the requested page number or the default page (0).',
        example=0,
    )
    pageSize: int = Field(
        ...,
        description='The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.',
        example=1000,
    )
    totalCount: Optional[int] = Field(
        None,
        description='The total number of elements that are available on the server and match the requested query parameters.',
        example=10,
    )
    totalPages: Optional[int] = Field(
        None,
        description='The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)',
        example=1,
    )


class ImageCollectionDeleteResponseResult(BaseModel):
    imageCollectionDbIds: List[str] = Field(
        ...,
        description='The unique ids of the ImageCollection records which have been successfully deleted',
        example=['6a4a59d8', '3ff067e0'],
    )


class ImageDeleteResponseResult(BaseModel):
    imageDbIds: List[str] = Field(
        ...,
        description='The unique ids of the Image records which have been successfully deleted',
        example=['6a4a59d8', '3ff067e0'],
    )


class ImagingEventDeleteResponseResult(BaseModel):
    imagingEventDbIds: List[str] = Field(
        ...,
        description='The unique ids of the ImagingEvent records which have been successfully deleted',
        example=['6a4a59d8', '3ff067e0'],
    )


class InlineResponse200Data(BaseModel):
    observation_unit_polygon_ndvi_imagery: Optional[int] = Field(None, example=500)
    observation_unit_polygon_tgi_imagery: Optional[int] = Field(None, example=500)
    total_plot_image_count: Optional[int] = Field(None, example=1000)


class ExternalReferences(BaseModel):
    __root__: List[ExternalReferencesInner] = Field(
        ...,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )


class Image(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.',
    )
    copyright: Optional[str] = Field(
        None,
        description="The copyright information of this image. Example 'Copyright 2018 Bob Robertson'",
        example='Copyright 2018 Bob Robertson',
    )
    description: Optional[str] = Field(
        None,
        description='The human readable description of an image.',
        example='This is a picture of a tomato',
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    imageDbId: Optional[str] = Field(
        None, description='The unique identifier of an image', example='a55efb9c'
    )
    imageFileName: Optional[str] = Field(
        None,
        description="The name of the image file. Might be the same as 'imageName', but could be different.",
        example='image_0000231.jpg',
    )
    imageFileSize: Optional[int] = Field(
        None, description='The size of the image in Bytes.', example=50000
    )
    imageHeight: Optional[int] = Field(
        None, description='The height of the image in Pixels.', example=550
    )
    imageLocation: Optional[GeoJSON] = None
    imageName: Optional[str] = Field(
        None,
        description="The human readable name of an image. Might be the same as 'imageFileName', but could be different.",
        example='Tomato Image 1',
    )
    imageTimeStamp: Optional[datetime] = Field(
        None, description='The date and time the image was taken'
    )
    imageURL: Optional[str] = Field(
        None,
        description='The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.',
        example='https://wiki.brapi.org/images/tomato',
    )
    imageWidth: Optional[int] = Field(
        None, description='The width of the image in Pixels.', example=700
    )
    mimeType: Optional[constr(regex='image/.*')] = Field(
        None,
        description="The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc",
        example='image/jpeg',
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this image is associated with, if applicable.',
        example=['d05dd235', '8875177d', 'c08e81b6'],
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The related observation unit identifier, if relevant.',
        example='b7e690b6',
    )


class ImageCollection(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.',
    )
    compressedImagesFileURI: Optional[str] = Field(
        None,
        description='If this collection of images exists as a compressed file (zip, tar, etc), compressedImagesFileURI should point to that file location',
    )
    copyright: Optional[str] = Field(
        None,
        description="The copyright information of this image collection. Example 'Copyright 2018 Bob Robertson'",
        example='Copyright 2018 Bob Robertson',
    )
    description: Optional[str] = Field(
        None,
        description='The human readable description of an image collection.',
        example='This is a picture of a tomato',
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the collection of images. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    imageCollectionDbId: Optional[str] = Field(
        None,
        description='The unique identifier of an image collection',
        example='5e9cafb5',
    )
    imageCollectionName: Optional[str] = Field(
        None,
        description='The human readable name of an image collection.',
        example='Drone Run 123 Red stream images',
    )
    imagingEventDbId: Optional[str] = Field(
        None, description='The imaging event that created this collection of images'
    )
    stichedImageDbId: Optional[str] = Field(
        None,
        description='If this collection of images has been combined or stiched in some way to produce a single large image, and that stiched image is stored in the database, then stichedImageDbId should point to its database identifier',
    )
    stichedImageURI: Optional[str] = Field(
        None,
        description='If this collection of images has been combined or stiched in some way to produce a single large image, stichedImageURI should point to that large image file location',
    )


class ImageCollectionNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.',
    )
    compressedImagesFileURI: Optional[str] = Field(
        None,
        description='If this collection of images exists as a compressed file (zip, tar, etc), compressedImagesFileURI should point to that file location',
    )
    copyright: Optional[str] = Field(
        None,
        description="The copyright information of this image collection. Example 'Copyright 2018 Bob Robertson'",
        example='Copyright 2018 Bob Robertson',
    )
    description: Optional[str] = Field(
        None,
        description='The human readable description of an image collection.',
        example='This is a picture of a tomato',
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the collection of images. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    imageCollectionName: Optional[str] = Field(
        None,
        description='The human readable name of an image collection.',
        example='Drone Run 123 Red stream images',
    )
    imagingEventDbId: Optional[str] = Field(
        None, description='The imaging event that created this collection of images'
    )
    stichedImageDbId: Optional[str] = Field(
        None,
        description='If this collection of images has been combined or stiched in some way to produce a single large image, and that stiched image is stored in the database, then stichedImageDbId should point to its database identifier',
    )
    stichedImageURI: Optional[str] = Field(
        None,
        description='If this collection of images has been combined or stiched in some way to produce a single large image, stichedImageURI should point to that large image file location',
    )


class ImageCollectionSearchRequest(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the imageCollection to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    imageCollectionDbIds: Optional[List[str]] = Field(
        None,
        description='A list of imageCollection Ids to search for',
        example=['564b64a6', '0d122d1d'],
    )
    imageCollectionFileNames: Optional[List[str]] = Field(
        None,
        description='ImageCollection file names to search for.',
        example=['imageCollection_01032019.jpg', 'picture_field_1234.jpg'],
    )
    imageCollectionFileSizeMax: Optional[int] = Field(
        None,
        description='A maximum imageCollection file size to search for.',
        example=20000000,
    )
    imageCollectionFileSizeMin: Optional[int] = Field(
        None,
        description='A minimum imageCollection file size to search for.',
        example=1000,
    )
    imageCollectionHeightMax: Optional[int] = Field(
        None,
        description='A maximum imageCollection height to search for.',
        example=1080,
    )
    imageCollectionHeightMin: Optional[int] = Field(
        None, description='A minimum imageCollection height to search for.', example=720
    )
    imageCollectionLocation: Optional[GeoJSONSearchArea] = None
    imageCollectionNames: Optional[List[str]] = Field(
        None,
        description='Human readable names to search for.',
        example=['ImageCollection 43', 'Tractor in field'],
    )
    imageCollectionTimeStampRangeEnd: Optional[datetime] = Field(
        None, description='The latest timestamp to search for.'
    )
    imageCollectionTimeStampRangeStart: Optional[datetime] = Field(
        None, description='The earliest timestamp to search for.'
    )
    imageCollectionWidthMax: Optional[int] = Field(
        None, description='A maximum imageCollection width to search for.', example=1920
    )
    imageCollectionWidthMin: Optional[int] = Field(
        None, description='A minimum imageCollection width to search for.', example=1280
    )
    mimeTypes: Optional[List[MimeType]] = Field(
        None,
        description='A set of imageCollection file types to search for.',
        example=['imageCollection/jpg', 'imageCollection/jpeg', 'imageCollection/gif'],
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this imageCollection is associated with to search for',
        example=['47326456', 'fc9823ac'],
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='A set of observation unit identifiers to search for.',
        example=['f5e4b273', '328c9424'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )


class ImageMutation(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.',
    )
    externalReferences: Optional[ExternalReferences] = None
    imageInputType: Optional[List[ImageInputTypeEnum]] = Field(
        None,
        description='The type of input an image mutation is expecting. A single image, a list/collection of images, or a list of image collections.',
        example=['IMAGE_LIST', 'IMAGE_COLLECTION_SINGLE'],
    )
    imageMutationDbId: Optional[str] = Field(
        None,
        description='Unique database identifier for an image mutation',
        example='224ab7d3',
    )
    imageMutationDescription: Optional[str] = Field(
        None,
        description='Human readable description of an image mutation',
        example='For removing the background using an upper and lower threshold. Uses OpenCV threshold.',
    )
    imageMutationName: Optional[str] = Field(
        None,
        description='Human readable name for an image mutation',
        example='Remove Background',
    )
    imageMutationParameters: Optional[
        List[ImageMutationImageMutationParameters]
    ] = Field(None, description='list of possible parameters used by an image mutation')


class ImageMutationRunRequest(BaseModel):
    imageMutationDbId: Optional[str] = Field(
        None,
        description='Unique database identifier for an image mutation',
        example='224ab7d3',
    )
    imageMutationParameters: Optional[
        List[ImageMutationRunRequestImageMutationParameters]
    ] = Field(
        None, description='list of parameters set for a specific image mutation run'
    )
    imagingEventDbId: Optional[str] = Field(
        None,
        description='Unique database identifier for an imaging event',
        example='32aa577d',
    )
    inputImageCollectionDbIds: Optional[List[str]] = Field(
        None,
        description='List of image collections to be used as input for a mutation run',
        example=[],
    )
    inputImageDbIds: Optional[List[str]] = Field(
        None,
        description='List of images to be used as input for a mutation run',
        example=['34a22db7'],
    )


class ImageMutationRunResponse(BaseModel):
    imageMutationDbId: Optional[str] = Field(
        None,
        description='Unique database identifier for an image mutation',
        example='224ab7d3',
    )
    imageMutationParameters: Optional[
        List[ImageMutationRunRequestImageMutationParameters]
    ] = Field(
        None, description='list of parameters set for a specific image mutation run'
    )
    mutatedImages: Optional[List[ImageMutationRunResponseMutatedImages]] = None


class ImageNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.',
    )
    copyright: Optional[str] = Field(
        None,
        description="The copyright information of this image. Example 'Copyright 2018 Bob Robertson'",
        example='Copyright 2018 Bob Robertson',
    )
    description: Optional[str] = Field(
        None,
        description='The human readable description of an image.',
        example='This is a picture of a tomato',
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    imageFileName: Optional[str] = Field(
        None,
        description="The name of the image file. Might be the same as 'imageName', but could be different.",
        example='image_0000231.jpg',
    )
    imageFileSize: Optional[int] = Field(
        None, description='The size of the image in Bytes.', example=50000
    )
    imageHeight: Optional[int] = Field(
        None, description='The height of the image in Pixels.', example=550
    )
    imageLocation: Optional[GeoJSON] = None
    imageName: Optional[str] = Field(
        None,
        description="The human readable name of an image. Might be the same as 'imageFileName', but could be different.",
        example='Tomato Image 1',
    )
    imageTimeStamp: Optional[datetime] = Field(
        None, description='The date and time the image was taken'
    )
    imageURL: Optional[str] = Field(
        None,
        description='The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.',
        example='https://wiki.brapi.org/images/tomato',
    )
    imageWidth: Optional[int] = Field(
        None, description='The width of the image in Pixels.', example=700
    )
    mimeType: Optional[constr(regex='image/.*')] = Field(
        None,
        description="The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc",
        example='image/jpeg',
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this image is associated with, if applicable.',
        example=['d05dd235', '8875177d', 'c08e81b6'],
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The related observation unit identifier, if relevant.',
        example='b7e690b6',
    )


class ImageSearchRequest(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    imageDbIds: Optional[List[str]] = Field(
        None,
        description='A list of image Ids to search for',
        example=['564b64a6', '0d122d1d'],
    )
    imageFileNames: Optional[List[str]] = Field(
        None,
        description='Image file names to search for.',
        example=['image_01032019.jpg', 'picture_field_1234.jpg'],
    )
    imageFileSizeMax: Optional[int] = Field(
        None, description='A maximum image file size to search for.', example=20000000
    )
    imageFileSizeMin: Optional[int] = Field(
        None, description='A minimum image file size to search for.', example=1000
    )
    imageHeightMax: Optional[int] = Field(
        None, description='A maximum image height to search for.', example=1080
    )
    imageHeightMin: Optional[int] = Field(
        None, description='A minimum image height to search for.', example=720
    )
    imageLocation: Optional[GeoJSONSearchArea] = None
    imageNames: Optional[List[str]] = Field(
        None,
        description='Human readable names to search for.',
        example=['Image 43', 'Tractor in field'],
    )
    imageTimeStampRangeEnd: Optional[datetime] = Field(
        None, description='The latest timestamp to search for.'
    )
    imageTimeStampRangeStart: Optional[datetime] = Field(
        None, description='The earliest timestamp to search for.'
    )
    imageWidthMax: Optional[int] = Field(
        None, description='A maximum image width to search for.', example=1920
    )
    imageWidthMin: Optional[int] = Field(
        None, description='A minimum image width to search for.', example=1280
    )
    mimeTypes: Optional[List[MimeType1]] = Field(
        None,
        description='A set of image file types to search for.',
        example=['image/jpg', 'image/jpeg', 'image/gif'],
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this image is associated with to search for',
        example=['47326456', 'fc9823ac'],
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='A set of observation unit identifiers to search for.',
        example=['f5e4b273', '328c9424'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )


class ImagingEvent(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.',
    )
    cameraDescription: Optional[str] = Field(
        None, description='Information about the camera taking the imagingEvents'
    )
    description: Optional[str] = Field(
        None,
        description='The human readable description of an imagingEvent imaging event',
        example='Drone Flight over field A',
    )
    equipmentDescription: Optional[str] = Field(
        None,
        description='The equipemnt being used to move the camera (drone, rover, person, etc)',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    imageCollectionDbIds: Optional[List[str]] = Field(
        None,
        description='An array of Image Collections DbIds connected to this imaging event',
    )
    imagingEventDbId: Optional[str] = Field(
        None,
        description='The unique identifier of an Imaging Event',
        example='a55efb9c',
    )
    imagingEventName: Optional[str] = None
    imagingEventTimeStamp: Optional[datetime] = Field(
        None, description='Date and time when a set of imagingEvents were taken'
    )
    studyDbId: Optional[str] = None
    studyName: Optional[str] = None


class ImagingEventNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, AdditionalInfo]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification.',
    )
    cameraDescription: Optional[str] = Field(
        None, description='Information about the camera taking the imagingEvents'
    )
    description: Optional[str] = Field(
        None,
        description='The human readable description of an imagingEvent imaging event',
        example='Drone Flight over field A',
    )
    equipmentDescription: Optional[str] = Field(
        None,
        description='The equipemnt being used to move the camera (drone, rover, person, etc)',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    imageCollectionDbIds: Optional[List[str]] = Field(
        None,
        description='An array of Image Collections DbIds connected to this imaging event',
    )
    imagingEventName: Optional[str] = None
    imagingEventTimeStamp: Optional[datetime] = Field(
        None, description='Date and time when a set of imagingEvents were taken'
    )
    studyDbId: Optional[str] = None
    studyName: Optional[str] = None


class Metadata(BaseModel):
    datafiles: Optional[List[DataFile]] = Field(
        None,
        description='The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ',
        example=[],
    )
    pagination: Optional[MetadataPagination] = None
    status: Optional[List[Status]] = Field(
        None,
        description='The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.',
    )


class ImageCollectionDeleteResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageCollectionDeleteResponseResult


class ImageDeleteResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageDeleteResponseResult


class ImagingEventDeleteResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImagingEventDeleteResponseResult


class Data(BaseModel):
    __root__: InlineResponse200Data


class InlineResponse200(BaseModel):
    data: Optional[Dict[str, Data]] = Field(
        None,
        description='An object with keys that are drone run database ids and values that are objects for the number of saved images for the various types of images.',
    )


class ImageCollectionSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageCollection


class ImageSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Image


class ImagingEventSingleResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImagingEvent


class ImageCollectionListResponseResult(BaseModel):
    data: List[ImageCollection] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ImageMutationRunListResponseResult(BaseModel):
    data: List[ImageMutationRunResponse]


class ImageMutationListResponseResult(BaseModel):
    data: List[ImageMutation]


class ImageListResponseResult(BaseModel):
    data: List[Image] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ImagingEventListResponseResult(BaseModel):
    data: List[ImagingEvent] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ImageCollectionListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageCollectionListResponseResult


class ImageMutationRunListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageMutationRunListResponseResult


class ImageMutationListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageMutationListResponseResult


class ImageListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageListResponseResult


class ImagingEventListResponse(BaseModel):
    _context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImagingEventListResponseResult
